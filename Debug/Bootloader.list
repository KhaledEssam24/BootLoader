
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000332c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08003438  08003438  00013438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003668  08003668  000202c8  2**0
                  CONTENTS
  4 .ARM          00000000  08003668  08003668  000202c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003668  08003668  000202c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003668  08003668  00013668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800366c  0800366c  0001366c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c8  20000000  08003670  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  200002c8  08003938  000202c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08003938  0002045c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000081d3  00000000  00000000  000202f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b29  00000000  00000000  000284c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  00029ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000730  00000000  00000000  0002a7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181d0  00000000  00000000  0002af28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a567  00000000  00000000  000430f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083d11  00000000  00000000  0004d65f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1370  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002644  00000000  00000000  000d13c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002c8 	.word	0x200002c8
 8000128:	00000000 	.word	0x00000000
 800012c:	08003420 	.word	0x08003420

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002cc 	.word	0x200002cc
 8000148:	08003420 	.word	0x08003420

0800014c <BL_fetch_host_command>:
static CRC_status_t     VH_CBL_MEM_READ_CMD(uint8_t*);
static CRC_status_t     VH_CBL_ED_W_PROTECT_CMD(uint8_t*);
static CRC_status_t     Jump_To_APP(uint8_t*);

BL_status_t BL_fetch_host_command(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	BL_status_t BL_status = BL_NOK;
 8000152:	2301      	movs	r3, #1
 8000154:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef uart_status = HAL_ERROR ;
 8000156:	2301      	movs	r3, #1
 8000158:	71bb      	strb	r3, [r7, #6]

	uart_status = HAL_UART_Receive(BL_COMM_UART , host_command_buffer , 1 ,HAL_MAX_DELAY);
 800015a:	f04f 33ff 	mov.w	r3, #4294967295
 800015e:	2201      	movs	r2, #1
 8000160:	4910      	ldr	r1, [pc, #64]	; (80001a4 <BL_fetch_host_command+0x58>)
 8000162:	4811      	ldr	r0, [pc, #68]	; (80001a8 <BL_fetch_host_command+0x5c>)
 8000164:	f001 ff91 	bl	800208a <HAL_UART_Receive>
 8000168:	4603      	mov	r3, r0
 800016a:	71bb      	strb	r3, [r7, #6]

	if (uart_status == HAL_OK)
 800016c:	79bb      	ldrb	r3, [r7, #6]
 800016e:	2b00      	cmp	r3, #0
 8000170:	d10f      	bne.n	8000192 <BL_fetch_host_command+0x46>
	{
		uart_status = HAL_UART_Receive(BL_COMM_UART , &(host_command_buffer[1]) , host_command_buffer[0] , HAL_MAX_DELAY);
 8000172:	4b0c      	ldr	r3, [pc, #48]	; (80001a4 <BL_fetch_host_command+0x58>)
 8000174:	781b      	ldrb	r3, [r3, #0]
 8000176:	b29a      	uxth	r2, r3
 8000178:	f04f 33ff 	mov.w	r3, #4294967295
 800017c:	490b      	ldr	r1, [pc, #44]	; (80001ac <BL_fetch_host_command+0x60>)
 800017e:	480a      	ldr	r0, [pc, #40]	; (80001a8 <BL_fetch_host_command+0x5c>)
 8000180:	f001 ff83 	bl	800208a <HAL_UART_Receive>
 8000184:	4603      	mov	r3, r0
 8000186:	71bb      	strb	r3, [r7, #6]
		if (uart_status == HAL_OK)
 8000188:	79bb      	ldrb	r3, [r7, #6]
 800018a:	2b00      	cmp	r3, #0
 800018c:	d101      	bne.n	8000192 <BL_fetch_host_command+0x46>
			BL_status = BL_OK;
 800018e:	2300      	movs	r3, #0
 8000190:	71fb      	strb	r3, [r7, #7]
	}
	Identify_command(host_command_buffer);
 8000192:	4804      	ldr	r0, [pc, #16]	; (80001a4 <BL_fetch_host_command+0x58>)
 8000194:	f000 f80c 	bl	80001b0 <Identify_command>

	return BL_status;
 8000198:	79fb      	ldrb	r3, [r7, #7]
}
 800019a:	4618      	mov	r0, r3
 800019c:	3708      	adds	r7, #8
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	200002e4 	.word	0x200002e4
 80001a8:	200003b8 	.word	0x200003b8
 80001ac:	200002e5 	.word	0x200002e5

080001b0 <Identify_command>:

static void     	 Identify_command (uint8_t* command)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
	switch(command[1])
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	3301      	adds	r3, #1
 80001bc:	781b      	ldrb	r3, [r3, #0]
 80001be:	2b21      	cmp	r3, #33	; 0x21
 80001c0:	dc2c      	bgt.n	800021c <Identify_command+0x6c>
 80001c2:	2b10      	cmp	r3, #16
 80001c4:	db7c      	blt.n	80002c0 <Identify_command+0x110>
 80001c6:	3b10      	subs	r3, #16
 80001c8:	2b11      	cmp	r3, #17
 80001ca:	d879      	bhi.n	80002c0 <Identify_command+0x110>
 80001cc:	a201      	add	r2, pc, #4	; (adr r2, 80001d4 <Identify_command+0x24>)
 80001ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001d2:	bf00      	nop
 80001d4:	08000223 	.word	0x08000223
 80001d8:	0800022b 	.word	0x0800022b
 80001dc:	08000233 	.word	0x08000233
 80001e0:	0800023b 	.word	0x0800023b
 80001e4:	08000249 	.word	0x08000249
 80001e8:	08000257 	.word	0x08000257
 80001ec:	08000265 	.word	0x08000265
 80001f0:	08000273 	.word	0x08000273
 80001f4:	08000281 	.word	0x08000281
 80001f8:	0800028f 	.word	0x0800028f
 80001fc:	080002c1 	.word	0x080002c1
 8000200:	080002c1 	.word	0x080002c1
 8000204:	080002c1 	.word	0x080002c1
 8000208:	080002c1 	.word	0x080002c1
 800020c:	080002c1 	.word	0x080002c1
 8000210:	080002c1 	.word	0x080002c1
 8000214:	0800029d 	.word	0x0800029d
 8000218:	080002ab 	.word	0x080002ab
 800021c:	2b99      	cmp	r3, #153	; 0x99
 800021e:	d04b      	beq.n	80002b8 <Identify_command+0x108>
			VH_CBL_CHANGE_ROP_Level_CMD(command);break;

		case SWITCH_TO_APP:
			Jump_To_APP(command);break;
	}
}
 8000220:	e04e      	b.n	80002c0 <Identify_command+0x110>
			VH_CBL_GET_VER_CMD(command);break;
 8000222:	6878      	ldr	r0, [r7, #4]
 8000224:	f000 f8e4 	bl	80003f0 <VH_CBL_GET_VER_CMD>
 8000228:	e04a      	b.n	80002c0 <Identify_command+0x110>
			VH_CBL_GET_HELP_CMD(command);break;
 800022a:	6878      	ldr	r0, [r7, #4]
 800022c:	f000 f9b0 	bl	8000590 <VH_CBL_GET_HELP_CMD>
 8000230:	e046      	b.n	80002c0 <Identify_command+0x110>
			VH_CBL_GET_CID_CMD(command);break;
 8000232:	6878      	ldr	r0, [r7, #4]
 8000234:	f000 f942 	bl	80004bc <VH_CBL_GET_CID_CMD>
 8000238:	e042      	b.n	80002c0 <Identify_command+0x110>
			printf("CBL_GET_RDP_STATUS_CMD\n");
 800023a:	4823      	ldr	r0, [pc, #140]	; (80002c8 <Identify_command+0x118>)
 800023c:	f002 f96c 	bl	8002518 <puts>
			VH_CBL_GET_RDP_STATUS_CMD(command);break;
 8000240:	6878      	ldr	r0, [r7, #4]
 8000242:	f000 fa2b 	bl	800069c <VH_CBL_GET_RDP_STATUS_CMD>
 8000246:	e03b      	b.n	80002c0 <Identify_command+0x110>
			printf("CBL_GO_TO_ADDR_CMD\n");
 8000248:	4820      	ldr	r0, [pc, #128]	; (80002cc <Identify_command+0x11c>)
 800024a:	f002 f965 	bl	8002518 <puts>
			VH_CBL_GO_TO_ADDR_CMD(command);break;
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f000 fa1a 	bl	8000688 <VH_CBL_GO_TO_ADDR_CMD>
 8000254:	e034      	b.n	80002c0 <Identify_command+0x110>
			printf("CBL_FLASH_ERASE_CMD\n");
 8000256:	481e      	ldr	r0, [pc, #120]	; (80002d0 <Identify_command+0x120>)
 8000258:	f002 f95e 	bl	8002518 <puts>
			VH_CBL_FLASH_ERASE_CMD(command);break;
 800025c:	6878      	ldr	r0, [r7, #4]
 800025e:	f000 fa09 	bl	8000674 <VH_CBL_FLASH_ERASE_CMD>
 8000262:	e02d      	b.n	80002c0 <Identify_command+0x110>
			printf("CBL_MEM_WRITE_CMD\n");
 8000264:	481b      	ldr	r0, [pc, #108]	; (80002d4 <Identify_command+0x124>)
 8000266:	f002 f957 	bl	8002518 <puts>
			VH_CBL_MEM_WRITE_CMD(command);break;
 800026a:	6878      	ldr	r0, [r7, #4]
 800026c:	f000 f9f8 	bl	8000660 <VH_CBL_MEM_WRITE_CMD>
 8000270:	e026      	b.n	80002c0 <Identify_command+0x110>
			printf("CBL_ED_W_PROTECT_CMD\n");
 8000272:	4819      	ldr	r0, [pc, #100]	; (80002d8 <Identify_command+0x128>)
 8000274:	f002 f950 	bl	8002518 <puts>
			VH_CBL_ED_W_PROTECT_CMD(command);break;
 8000278:	6878      	ldr	r0, [r7, #4]
 800027a:	f000 fa41 	bl	8000700 <VH_CBL_ED_W_PROTECT_CMD>
 800027e:	e01f      	b.n	80002c0 <Identify_command+0x110>
			printf("CBL_MEM_READ_CMD\n");
 8000280:	4816      	ldr	r0, [pc, #88]	; (80002dc <Identify_command+0x12c>)
 8000282:	f002 f949 	bl	8002518 <puts>
			VH_CBL_MEM_READ_CMD(command);break;
 8000286:	6878      	ldr	r0, [r7, #4]
 8000288:	f000 fa30 	bl	80006ec <VH_CBL_MEM_READ_CMD>
 800028c:	e018      	b.n	80002c0 <Identify_command+0x110>
			printf("CBL_READ_SECTOR_STATUS_CMD\n");
 800028e:	4814      	ldr	r0, [pc, #80]	; (80002e0 <Identify_command+0x130>)
 8000290:	f002 f942 	bl	8002518 <puts>
			VH_CBL_READ_SECTOR_STATUS_CMD(command);break;
 8000294:	6878      	ldr	r0, [r7, #4]
 8000296:	f000 fa1f 	bl	80006d8 <VH_CBL_READ_SECTOR_STATUS_CMD>
 800029a:	e011      	b.n	80002c0 <Identify_command+0x110>
			printf("CBL_OTP_READ_CMD\n");
 800029c:	4811      	ldr	r0, [pc, #68]	; (80002e4 <Identify_command+0x134>)
 800029e:	f002 f93b 	bl	8002518 <puts>
			VH_CBL_OTP_READ_CMD(command);break;
 80002a2:	6878      	ldr	r0, [r7, #4]
 80002a4:	f000 fa0e 	bl	80006c4 <VH_CBL_OTP_READ_CMD>
 80002a8:	e00a      	b.n	80002c0 <Identify_command+0x110>
			printf("CBL_CHANGE_ROP_Level_CMD\n");
 80002aa:	480f      	ldr	r0, [pc, #60]	; (80002e8 <Identify_command+0x138>)
 80002ac:	f002 f934 	bl	8002518 <puts>
			VH_CBL_CHANGE_ROP_Level_CMD(command);break;
 80002b0:	6878      	ldr	r0, [r7, #4]
 80002b2:	f000 f9fd 	bl	80006b0 <VH_CBL_CHANGE_ROP_Level_CMD>
 80002b6:	e003      	b.n	80002c0 <Identify_command+0x110>
			Jump_To_APP(command);break;
 80002b8:	6878      	ldr	r0, [r7, #4]
 80002ba:	f000 f817 	bl	80002ec <Jump_To_APP>
 80002be:	bf00      	nop
}
 80002c0:	bf00      	nop
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	08003438 	.word	0x08003438
 80002cc:	08003450 	.word	0x08003450
 80002d0:	08003464 	.word	0x08003464
 80002d4:	08003478 	.word	0x08003478
 80002d8:	0800348c 	.word	0x0800348c
 80002dc:	080034a4 	.word	0x080034a4
 80002e0:	080034b8 	.word	0x080034b8
 80002e4:	080034d4 	.word	0x080034d4
 80002e8:	080034e8 	.word	0x080034e8

080002ec <Jump_To_APP>:

static CRC_status_t   Jump_To_APP(uint8_t* command)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b08c      	sub	sp, #48	; 0x30
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
	#if DEBUG
	printf("Switch To App");
 80002f4:	4835      	ldr	r0, [pc, #212]	; (80003cc <Jump_To_APP+0xe0>)
 80002f6:	f002 f889 	bl	800240c <iprintf>
	#endif
	CRC_status_t CRC_status = CRC_INVALID;
 80002fa:	2301      	movs	r3, #1
 80002fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	uint32_t crc_host = *((uint32_t*)((command + command[0] + 1) - 4));
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	3b03      	subs	r3, #3
 8000306:	687a      	ldr	r2, [r7, #4]
 8000308:	4413      	add	r3, r2
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	623b      	str	r3, [r7, #32]
	uint32_t crc_calc = 0;
 800030e:	2300      	movs	r3, #0
 8000310:	62bb      	str	r3, [r7, #40]	; 0x28

	for (uint8_t counter =0 ;counter < command[0]-4 +1 ;counter++)
 8000312:	2300      	movs	r3, #0
 8000314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000318:	e012      	b.n	8000340 <Jump_To_APP+0x54>
	{
		uint32_t buffer = command[counter];
 800031a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	4413      	add	r3, r2
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	60fb      	str	r3, [r7, #12]
		crc_calc = HAL_CRC_Accumulate(&hcrc, &buffer , 1 );
 8000326:	f107 030c 	add.w	r3, r7, #12
 800032a:	2201      	movs	r2, #1
 800032c:	4619      	mov	r1, r3
 800032e:	4828      	ldr	r0, [pc, #160]	; (80003d0 <Jump_To_APP+0xe4>)
 8000330:	f000 fe92 	bl	8001058 <HAL_CRC_Accumulate>
 8000334:	62b8      	str	r0, [r7, #40]	; 0x28
	for (uint8_t counter =0 ;counter < command[0]-4 +1 ;counter++)
 8000336:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800033a:	3301      	adds	r3, #1
 800033c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000340:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	3b03      	subs	r3, #3
 800034a:	429a      	cmp	r2, r3
 800034c:	dbe5      	blt.n	800031a <Jump_To_APP+0x2e>
	}

	if (crc_host == crc_calc)
 800034e:	6a3a      	ldr	r2, [r7, #32]
 8000350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000352:	429a      	cmp	r2, r3
 8000354:	d126      	bne.n	80003a4 <Jump_To_APP+0xb8>
	{
		#if DEBUG
		printf("CRC_VALID\n");
 8000356:	481f      	ldr	r0, [pc, #124]	; (80003d4 <Jump_To_APP+0xe8>)
 8000358:	f002 f8de 	bl	8002518 <puts>
		#endif

		CRC_status = CRC_VALID;
 800035c:	2300      	movs	r3, #0
 800035e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint32_t MSP 					= *((volatile uint32_t*)(0x8010000));
 8000362:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <Jump_To_APP+0xec>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	61fb      	str	r3, [r7, #28]
		uint32_t Reset_Main_App_Handler = *((volatile uint32_t*)(0x8010000 + 4));
 8000368:	4b1c      	ldr	r3, [pc, #112]	; (80003dc <Jump_To_APP+0xf0>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	61bb      	str	r3, [r7, #24]

		void (*Ptr_Reset_Main_App_Handler) (void) = (void*)Reset_Main_App_Handler;
 800036e:	69bb      	ldr	r3, [r7, #24]
 8000370:	617b      	str	r3, [r7, #20]

		HAL_RCC_DeInit();
 8000372:	f001 f8db 	bl	800152c <HAL_RCC_DeInit>
		HAL_CRC_DeInit(&hcrc);
 8000376:	4816      	ldr	r0, [pc, #88]	; (80003d0 <Jump_To_APP+0xe4>)
 8000378:	f000 fe41 	bl	8000ffe <HAL_CRC_DeInit>
		HAL_GPIO_DeInit(GPIOC, GPIO_PIN_13);
 800037c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000380:	4817      	ldr	r0, [pc, #92]	; (80003e0 <Jump_To_APP+0xf4>)
 8000382:	f001 f817 	bl	80013b4 <HAL_GPIO_DeInit>
		HAL_UART_DeInit(&huart2);
 8000386:	4817      	ldr	r0, [pc, #92]	; (80003e4 <Jump_To_APP+0xf8>)
 8000388:	f001 fdca 	bl	8001f20 <HAL_UART_DeInit>
		HAL_UART_DeInit(&huart3);
 800038c:	4816      	ldr	r0, [pc, #88]	; (80003e8 <Jump_To_APP+0xfc>)
 800038e:	f001 fdc7 	bl	8001f20 <HAL_UART_DeInit>
 8000392:	69fb      	ldr	r3, [r7, #28]
 8000394:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000396:	693b      	ldr	r3, [r7, #16]
 8000398:	f383 8808 	msr	MSP, r3
}
 800039c:	bf00      	nop

		__set_MSP(MSP);
		Ptr_Reset_Main_App_Handler();
 800039e:	697b      	ldr	r3, [r7, #20]
 80003a0:	4798      	blx	r3
 80003a2:	e005      	b.n	80003b0 <Jump_To_APP+0xc4>
	}
	else
	{
		#if DEBUG
		printf("CRC_INVALID\n");
 80003a4:	4811      	ldr	r0, [pc, #68]	; (80003ec <Jump_To_APP+0x100>)
 80003a6:	f002 f8b7 	bl	8002518 <puts>
		#endif
		CRC_status = CRC_INVALID;
 80003aa:	2301      	movs	r3, #1
 80003ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}
	__HAL_CRC_DR_RESET(&hcrc);
 80003b0:	4b07      	ldr	r3, [pc, #28]	; (80003d0 <Jump_To_APP+0xe4>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	689a      	ldr	r2, [r3, #8]
 80003b6:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <Jump_To_APP+0xe4>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f042 0201 	orr.w	r2, r2, #1
 80003be:	609a      	str	r2, [r3, #8]
	return CRC_status;
 80003c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	3730      	adds	r7, #48	; 0x30
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	08003504 	.word	0x08003504
 80003d0:	200003ac 	.word	0x200003ac
 80003d4:	08003514 	.word	0x08003514
 80003d8:	08010000 	.word	0x08010000
 80003dc:	08010004 	.word	0x08010004
 80003e0:	40011000 	.word	0x40011000
 80003e4:	200003b8 	.word	0x200003b8
 80003e8:	20000400 	.word	0x20000400
 80003ec:	08003520 	.word	0x08003520

080003f0 <VH_CBL_GET_VER_CMD>:



static CRC_status_t  VH_CBL_GET_VER_CMD(uint8_t* command)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b088      	sub	sp, #32
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]

	#if DEBUG
	printf("CBL_GET_VER_CMD\n");
 80003f8:	482a      	ldr	r0, [pc, #168]	; (80004a4 <VH_CBL_GET_VER_CMD+0xb4>)
 80003fa:	f002 f88d 	bl	8002518 <puts>
	#endif
	CRC_status_t CRC_status = CRC_INVALID;
 80003fe:	2301      	movs	r3, #1
 8000400:	77fb      	strb	r3, [r7, #31]

	uint8_t BL_version[4]= {CBL_ID,CBL_SW_MAJOR_VERSION,CBL_SW_MINOR_VERSION,CBL_SW_PATCH_VERSION};
 8000402:	f44f 73b2 	mov.w	r3, #356	; 0x164
 8000406:	60fb      	str	r3, [r7, #12]

	uint32_t crc_host = *((uint32_t*)((command + command[0] + 1) - 4));
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	3b03      	subs	r3, #3
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	4413      	add	r3, r2
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	613b      	str	r3, [r7, #16]
	uint32_t crc_calc = 0;
 8000416:	2300      	movs	r3, #0
 8000418:	61bb      	str	r3, [r7, #24]

	for (uint8_t counter =0 ;counter < command[0]-4 +1 ;counter++)
 800041a:	2300      	movs	r3, #0
 800041c:	75fb      	strb	r3, [r7, #23]
 800041e:	e00f      	b.n	8000440 <VH_CBL_GET_VER_CMD+0x50>
	{
		uint32_t buffer = command[counter];
 8000420:	7dfb      	ldrb	r3, [r7, #23]
 8000422:	687a      	ldr	r2, [r7, #4]
 8000424:	4413      	add	r3, r2
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	60bb      	str	r3, [r7, #8]
		crc_calc = HAL_CRC_Accumulate(&hcrc, &buffer , 1 );
 800042a:	f107 0308 	add.w	r3, r7, #8
 800042e:	2201      	movs	r2, #1
 8000430:	4619      	mov	r1, r3
 8000432:	481d      	ldr	r0, [pc, #116]	; (80004a8 <VH_CBL_GET_VER_CMD+0xb8>)
 8000434:	f000 fe10 	bl	8001058 <HAL_CRC_Accumulate>
 8000438:	61b8      	str	r0, [r7, #24]
	for (uint8_t counter =0 ;counter < command[0]-4 +1 ;counter++)
 800043a:	7dfb      	ldrb	r3, [r7, #23]
 800043c:	3301      	adds	r3, #1
 800043e:	75fb      	strb	r3, [r7, #23]
 8000440:	7dfa      	ldrb	r2, [r7, #23]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	3b03      	subs	r3, #3
 8000448:	429a      	cmp	r2, r3
 800044a:	dbe9      	blt.n	8000420 <VH_CBL_GET_VER_CMD+0x30>
	}

	if (crc_host == crc_calc)
 800044c:	693a      	ldr	r2, [r7, #16]
 800044e:	69bb      	ldr	r3, [r7, #24]
 8000450:	429a      	cmp	r2, r3
 8000452:	d115      	bne.n	8000480 <VH_CBL_GET_VER_CMD+0x90>
	{
		#if DEBUG
		printf("CRC_VALID\n");
 8000454:	4815      	ldr	r0, [pc, #84]	; (80004ac <VH_CBL_GET_VER_CMD+0xbc>)
 8000456:	f002 f85f 	bl	8002518 <puts>
		#endif

		CRC_status = CRC_VALID;
 800045a:	2300      	movs	r3, #0
 800045c:	77fb      	strb	r3, [r7, #31]

		HAL_UART_Transmit(BL_COMM_UART,BL_version,4,HAL_MAX_DELAY);
 800045e:	f107 010c 	add.w	r1, r7, #12
 8000462:	f04f 33ff 	mov.w	r3, #4294967295
 8000466:	2204      	movs	r2, #4
 8000468:	4811      	ldr	r0, [pc, #68]	; (80004b0 <VH_CBL_GET_VER_CMD+0xc0>)
 800046a:	f001 fd8b 	bl	8001f84 <HAL_UART_Transmit>
		#if DEBUG
		printf("Version is %d.%d.%d\n",BL_version[1],BL_version[2],BL_version[3]);
 800046e:	7b7b      	ldrb	r3, [r7, #13]
 8000470:	4619      	mov	r1, r3
 8000472:	7bbb      	ldrb	r3, [r7, #14]
 8000474:	461a      	mov	r2, r3
 8000476:	7bfb      	ldrb	r3, [r7, #15]
 8000478:	480e      	ldr	r0, [pc, #56]	; (80004b4 <VH_CBL_GET_VER_CMD+0xc4>)
 800047a:	f001 ffc7 	bl	800240c <iprintf>
 800047e:	e004      	b.n	800048a <VH_CBL_GET_VER_CMD+0x9a>
		#endif
	}
	else
	{
		#if DEBUG
		printf("CRC_INVALID\n");
 8000480:	480d      	ldr	r0, [pc, #52]	; (80004b8 <VH_CBL_GET_VER_CMD+0xc8>)
 8000482:	f002 f849 	bl	8002518 <puts>
		#endif
		CRC_status = CRC_INVALID;
 8000486:	2301      	movs	r3, #1
 8000488:	77fb      	strb	r3, [r7, #31]
	}
	__HAL_CRC_DR_RESET(&hcrc);
 800048a:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <VH_CBL_GET_VER_CMD+0xb8>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	689a      	ldr	r2, [r3, #8]
 8000490:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <VH_CBL_GET_VER_CMD+0xb8>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	f042 0201 	orr.w	r2, r2, #1
 8000498:	609a      	str	r2, [r3, #8]
	return CRC_status;
 800049a:	7ffb      	ldrb	r3, [r7, #31]
}
 800049c:	4618      	mov	r0, r3
 800049e:	3720      	adds	r7, #32
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	0800352c 	.word	0x0800352c
 80004a8:	200003ac 	.word	0x200003ac
 80004ac:	08003514 	.word	0x08003514
 80004b0:	200003b8 	.word	0x200003b8
 80004b4:	0800353c 	.word	0x0800353c
 80004b8:	08003520 	.word	0x08003520

080004bc <VH_CBL_GET_CID_CMD>:

static CRC_status_t  VH_CBL_GET_CID_CMD(uint8_t* command)  //Get Chip ID
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b088      	sub	sp, #32
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]

	#if DEBUG
	printf("VH_CBL_GET_CID_CMD\n");
 80004c4:	482b      	ldr	r0, [pc, #172]	; (8000574 <VH_CBL_GET_CID_CMD+0xb8>)
 80004c6:	f002 f827 	bl	8002518 <puts>
	#endif
	CRC_status_t CRC_status = CRC_INVALID;
 80004ca:	2301      	movs	r3, #1
 80004cc:	77fb      	strb	r3, [r7, #31]

	uint32_t crc_host = *((uint32_t*)((command + command[0] + 1) - 4));
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	3b03      	subs	r3, #3
 80004d4:	687a      	ldr	r2, [r7, #4]
 80004d6:	4413      	add	r3, r2
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	613b      	str	r3, [r7, #16]
	uint32_t crc_calc = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	61bb      	str	r3, [r7, #24]

	for (uint8_t counter =0 ;counter < command[0]-4 +1 ;counter++)
 80004e0:	2300      	movs	r3, #0
 80004e2:	75fb      	strb	r3, [r7, #23]
 80004e4:	e00f      	b.n	8000506 <VH_CBL_GET_CID_CMD+0x4a>
	{
		uint32_t buffer = command[counter];
 80004e6:	7dfb      	ldrb	r3, [r7, #23]
 80004e8:	687a      	ldr	r2, [r7, #4]
 80004ea:	4413      	add	r3, r2
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	60fb      	str	r3, [r7, #12]
		crc_calc = HAL_CRC_Accumulate(&hcrc, &buffer , 1 );
 80004f0:	f107 030c 	add.w	r3, r7, #12
 80004f4:	2201      	movs	r2, #1
 80004f6:	4619      	mov	r1, r3
 80004f8:	481f      	ldr	r0, [pc, #124]	; (8000578 <VH_CBL_GET_CID_CMD+0xbc>)
 80004fa:	f000 fdad 	bl	8001058 <HAL_CRC_Accumulate>
 80004fe:	61b8      	str	r0, [r7, #24]
	for (uint8_t counter =0 ;counter < command[0]-4 +1 ;counter++)
 8000500:	7dfb      	ldrb	r3, [r7, #23]
 8000502:	3301      	adds	r3, #1
 8000504:	75fb      	strb	r3, [r7, #23]
 8000506:	7dfa      	ldrb	r2, [r7, #23]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	3b03      	subs	r3, #3
 800050e:	429a      	cmp	r2, r3
 8000510:	dbe9      	blt.n	80004e6 <VH_CBL_GET_CID_CMD+0x2a>
	}

	if (crc_host == crc_calc)
 8000512:	693a      	ldr	r2, [r7, #16]
 8000514:	69bb      	ldr	r3, [r7, #24]
 8000516:	429a      	cmp	r2, r3
 8000518:	d119      	bne.n	800054e <VH_CBL_GET_CID_CMD+0x92>
	{
		#if DEBUG
		printf("CRC_VALID\n");
 800051a:	4818      	ldr	r0, [pc, #96]	; (800057c <VH_CBL_GET_CID_CMD+0xc0>)
 800051c:	f001 fffc 	bl	8002518 <puts>
		#endif
		CRC_status = CRC_VALID;
 8000520:	2300      	movs	r3, #0
 8000522:	77fb      	strb	r3, [r7, #31]

		/*Read device ID from DBG REG*/
		uint16_t DEV_ID = (uint16_t)((DBGMCU->IDCODE)&0x000007ff);
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <VH_CBL_GET_CID_CMD+0xc4>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	b29b      	uxth	r3, r3
 800052a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800052e:	b29b      	uxth	r3, r3
 8000530:	817b      	strh	r3, [r7, #10]
		HAL_UART_Transmit(BL_COMM_UART,(uint8_t*)(&DEV_ID),2 , HAL_MAX_DELAY);
 8000532:	f107 010a 	add.w	r1, r7, #10
 8000536:	f04f 33ff 	mov.w	r3, #4294967295
 800053a:	2202      	movs	r2, #2
 800053c:	4811      	ldr	r0, [pc, #68]	; (8000584 <VH_CBL_GET_CID_CMD+0xc8>)
 800053e:	f001 fd21 	bl	8001f84 <HAL_UART_Transmit>
		#if DEBUG
		printf("CID = 0X%x\n",DEV_ID);
 8000542:	897b      	ldrh	r3, [r7, #10]
 8000544:	4619      	mov	r1, r3
 8000546:	4810      	ldr	r0, [pc, #64]	; (8000588 <VH_CBL_GET_CID_CMD+0xcc>)
 8000548:	f001 ff60 	bl	800240c <iprintf>
 800054c:	e004      	b.n	8000558 <VH_CBL_GET_CID_CMD+0x9c>
		#endif
	}
	else
	{
		#if DEBUG
		printf("CRC_INVALID\n");
 800054e:	480f      	ldr	r0, [pc, #60]	; (800058c <VH_CBL_GET_CID_CMD+0xd0>)
 8000550:	f001 ffe2 	bl	8002518 <puts>
		#endif
		CRC_status = CRC_INVALID;
 8000554:	2301      	movs	r3, #1
 8000556:	77fb      	strb	r3, [r7, #31]
	}
	__HAL_CRC_DR_RESET(&hcrc);
 8000558:	4b07      	ldr	r3, [pc, #28]	; (8000578 <VH_CBL_GET_CID_CMD+0xbc>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	689a      	ldr	r2, [r3, #8]
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <VH_CBL_GET_CID_CMD+0xbc>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f042 0201 	orr.w	r2, r2, #1
 8000566:	609a      	str	r2, [r3, #8]
	return CRC_status;
 8000568:	7ffb      	ldrb	r3, [r7, #31]
}
 800056a:	4618      	mov	r0, r3
 800056c:	3720      	adds	r7, #32
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	08003554 	.word	0x08003554
 8000578:	200003ac 	.word	0x200003ac
 800057c:	08003514 	.word	0x08003514
 8000580:	e0042000 	.word	0xe0042000
 8000584:	200003b8 	.word	0x200003b8
 8000588:	08003568 	.word	0x08003568
 800058c:	08003520 	.word	0x08003520

08000590 <VH_CBL_GET_HELP_CMD>:

static CRC_status_t  VH_CBL_GET_HELP_CMD(uint8_t* command)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	#if DEBUG
	printf("CBL_GET_HELP_CMD\n");
 8000598:	482b      	ldr	r0, [pc, #172]	; (8000648 <VH_CBL_GET_HELP_CMD+0xb8>)
 800059a:	f001 ffbd 	bl	8002518 <puts>
		 "CBL_READ_SECTOR_STATUS_CMD =  0x19\n",
		 "CBL_OTP_READ_CMD           =  0x20\n",
		 "CBL_CHANGE_ROP_Level_CMD   =  0x21\n"
	};

	CRC_status_t CRC_status = CRC_INVALID;
 800059e:	2301      	movs	r3, #1
 80005a0:	77fb      	strb	r3, [r7, #31]

	uint32_t crc_host = *((uint32_t*)((command + command[0] + 1) - 4));
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	3b03      	subs	r3, #3
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4413      	add	r3, r2
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	613b      	str	r3, [r7, #16]

	uint32_t crc_calc = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61bb      	str	r3, [r7, #24]

	for (uint8_t counter =0 ;counter < command[0]-4 +1 ;counter++)
 80005b4:	2300      	movs	r3, #0
 80005b6:	75fb      	strb	r3, [r7, #23]
 80005b8:	e00f      	b.n	80005da <VH_CBL_GET_HELP_CMD+0x4a>
	{
		uint32_t buffer = command[counter];
 80005ba:	7dfb      	ldrb	r3, [r7, #23]
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	4413      	add	r3, r2
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	60fb      	str	r3, [r7, #12]
		crc_calc = HAL_CRC_Accumulate(&hcrc, &buffer , 1 );
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2201      	movs	r2, #1
 80005ca:	4619      	mov	r1, r3
 80005cc:	481f      	ldr	r0, [pc, #124]	; (800064c <VH_CBL_GET_HELP_CMD+0xbc>)
 80005ce:	f000 fd43 	bl	8001058 <HAL_CRC_Accumulate>
 80005d2:	61b8      	str	r0, [r7, #24]
	for (uint8_t counter =0 ;counter < command[0]-4 +1 ;counter++)
 80005d4:	7dfb      	ldrb	r3, [r7, #23]
 80005d6:	3301      	adds	r3, #1
 80005d8:	75fb      	strb	r3, [r7, #23]
 80005da:	7dfa      	ldrb	r2, [r7, #23]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	3b03      	subs	r3, #3
 80005e2:	429a      	cmp	r2, r3
 80005e4:	dbe9      	blt.n	80005ba <VH_CBL_GET_HELP_CMD+0x2a>
	}


	if (crc_host == crc_calc)
 80005e6:	693a      	ldr	r2, [r7, #16]
 80005e8:	69bb      	ldr	r3, [r7, #24]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d11a      	bne.n	8000624 <VH_CBL_GET_HELP_CMD+0x94>
	{
		#if DEBUG
		printf("CRC_VALID\n");
 80005ee:	4818      	ldr	r0, [pc, #96]	; (8000650 <VH_CBL_GET_HELP_CMD+0xc0>)
 80005f0:	f001 ff92 	bl	8002518 <puts>
		#endif
		CRC_status = CRC_VALID;
 80005f4:	2300      	movs	r3, #0
 80005f6:	77fb      	strb	r3, [r7, #31]

		for (uint8_t i = 0 ; i < 12 ; i++)
 80005f8:	2300      	movs	r3, #0
 80005fa:	75bb      	strb	r3, [r7, #22]
 80005fc:	e00e      	b.n	800061c <VH_CBL_GET_HELP_CMD+0x8c>
		{
			HAL_UART_Transmit(BL_COMM_UART,(uint8_t*)CB_commands[i],35,HAL_MAX_DELAY);
 80005fe:	7dbb      	ldrb	r3, [r7, #22]
 8000600:	2232      	movs	r2, #50	; 0x32
 8000602:	fb02 f303 	mul.w	r3, r2, r3
 8000606:	4a13      	ldr	r2, [pc, #76]	; (8000654 <VH_CBL_GET_HELP_CMD+0xc4>)
 8000608:	1899      	adds	r1, r3, r2
 800060a:	f04f 33ff 	mov.w	r3, #4294967295
 800060e:	2223      	movs	r2, #35	; 0x23
 8000610:	4811      	ldr	r0, [pc, #68]	; (8000658 <VH_CBL_GET_HELP_CMD+0xc8>)
 8000612:	f001 fcb7 	bl	8001f84 <HAL_UART_Transmit>
		for (uint8_t i = 0 ; i < 12 ; i++)
 8000616:	7dbb      	ldrb	r3, [r7, #22]
 8000618:	3301      	adds	r3, #1
 800061a:	75bb      	strb	r3, [r7, #22]
 800061c:	7dbb      	ldrb	r3, [r7, #22]
 800061e:	2b0b      	cmp	r3, #11
 8000620:	d9ed      	bls.n	80005fe <VH_CBL_GET_HELP_CMD+0x6e>
 8000622:	e004      	b.n	800062e <VH_CBL_GET_HELP_CMD+0x9e>

	}
	else
	{
		#if DEBUG
		printf("CRC_INVALID\n");
 8000624:	480d      	ldr	r0, [pc, #52]	; (800065c <VH_CBL_GET_HELP_CMD+0xcc>)
 8000626:	f001 ff77 	bl	8002518 <puts>
		#endif
		CRC_status = CRC_INVALID;
 800062a:	2301      	movs	r3, #1
 800062c:	77fb      	strb	r3, [r7, #31]
	}
	__HAL_CRC_DR_RESET(&hcrc);
 800062e:	4b07      	ldr	r3, [pc, #28]	; (800064c <VH_CBL_GET_HELP_CMD+0xbc>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	689a      	ldr	r2, [r3, #8]
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <VH_CBL_GET_HELP_CMD+0xbc>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f042 0201 	orr.w	r2, r2, #1
 800063c:	609a      	str	r2, [r3, #8]
	return CRC_status;
 800063e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000640:	4618      	mov	r0, r3
 8000642:	3720      	adds	r7, #32
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	08003574 	.word	0x08003574
 800064c:	200003ac 	.word	0x200003ac
 8000650:	08003514 	.word	0x08003514
 8000654:	20000000 	.word	0x20000000
 8000658:	200003b8 	.word	0x200003b8
 800065c:	08003520 	.word	0x08003520

08000660 <VH_CBL_MEM_WRITE_CMD>:


static CRC_status_t  VH_CBL_MEM_WRITE_CMD(uint8_t* command)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

}
 8000668:	bf00      	nop
 800066a:	4618      	mov	r0, r3
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr

08000674 <VH_CBL_FLASH_ERASE_CMD>:



static CRC_status_t  VH_CBL_FLASH_ERASE_CMD(uint8_t* command)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]

}
 800067c:	bf00      	nop
 800067e:	4618      	mov	r0, r3
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr

08000688 <VH_CBL_GO_TO_ADDR_CMD>:

static CRC_status_t  VH_CBL_GO_TO_ADDR_CMD(uint8_t* command)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

}
 8000690:	bf00      	nop
 8000692:	4618      	mov	r0, r3
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr

0800069c <VH_CBL_GET_RDP_STATUS_CMD>:

static CRC_status_t  VH_CBL_GET_RDP_STATUS_CMD(uint8_t* command)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]

}
 80006a4:	bf00      	nop
 80006a6:	4618      	mov	r0, r3
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr

080006b0 <VH_CBL_CHANGE_ROP_Level_CMD>:



static CRC_status_t  VH_CBL_CHANGE_ROP_Level_CMD(uint8_t* command)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

}
 80006b8:	bf00      	nop
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr

080006c4 <VH_CBL_OTP_READ_CMD>:

static CRC_status_t  VH_CBL_OTP_READ_CMD(uint8_t* command)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]

}
 80006cc:	bf00      	nop
 80006ce:	4618      	mov	r0, r3
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr

080006d8 <VH_CBL_READ_SECTOR_STATUS_CMD>:

static CRC_status_t  VH_CBL_READ_SECTOR_STATUS_CMD(uint8_t* command)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]

}
 80006e0:	bf00      	nop
 80006e2:	4618      	mov	r0, r3
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr

080006ec <VH_CBL_MEM_READ_CMD>:

static CRC_status_t  VH_CBL_MEM_READ_CMD(uint8_t* command)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]

}
 80006f4:	bf00      	nop
 80006f6:	4618      	mov	r0, r3
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <VH_CBL_ED_W_PROTECT_CMD>:

static CRC_status_t  VH_CBL_ED_W_PROTECT_CMD(uint8_t* command)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]

}
 8000708:	bf00      	nop
 800070a:	4618      	mov	r0, r3
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr

08000714 <__io_putchar>:

int __io_putchar(int ch)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  uint8_t c = ch;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	b2db      	uxtb	r3, r3
 8000720:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(BL_DEBUD_UART, &c, 1, HAL_MAX_DELAY); // Send the character via UART
 8000722:	f107 010f 	add.w	r1, r7, #15
 8000726:	f04f 33ff 	mov.w	r3, #4294967295
 800072a:	2201      	movs	r2, #1
 800072c:	4803      	ldr	r0, [pc, #12]	; (800073c <__io_putchar+0x28>)
 800072e:	f001 fc29 	bl	8001f84 <HAL_UART_Transmit>
  return ch;
 8000732:	687b      	ldr	r3, [r7, #4]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	200003b8 	.word	0x200003b8

08000740 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_CRC_Init+0x20>)
 8000746:	4a07      	ldr	r2, [pc, #28]	; (8000764 <MX_CRC_Init+0x24>)
 8000748:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_CRC_Init+0x20>)
 800074c:	f000 fc3b 	bl	8000fc6 <HAL_CRC_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000756:	f000 f8cc 	bl	80008f2 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200003ac 	.word	0x200003ac
 8000764:	40023000 	.word	0x40023000

08000768 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a09      	ldr	r2, [pc, #36]	; (800079c <HAL_CRC_MspInit+0x34>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d10b      	bne.n	8000792 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <HAL_CRC_MspInit+0x38>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <HAL_CRC_MspInit+0x38>)
 8000780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000784:	6153      	str	r3, [r2, #20]
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <HAL_CRC_MspInit+0x38>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000792:	bf00      	nop
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	40023000 	.word	0x40023000
 80007a0:	40021000 	.word	0x40021000

080007a4 <HAL_CRC_MspDeInit>:

void HAL_CRC_MspDeInit(CRC_HandleTypeDef* crcHandle)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a06      	ldr	r2, [pc, #24]	; (80007cc <HAL_CRC_MspDeInit+0x28>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d105      	bne.n	80007c2 <HAL_CRC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <HAL_CRC_MspDeInit+0x2c>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	4a05      	ldr	r2, [pc, #20]	; (80007d0 <HAL_CRC_MspDeInit+0x2c>)
 80007bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007c0:	6153      	str	r3, [r2, #20]
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	40023000 	.word	0x40023000
 80007d0:	40021000 	.word	0x40021000

080007d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_GPIO_Init+0x58>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	4a13      	ldr	r2, [pc, #76]	; (800082c <MX_GPIO_Init+0x58>)
 80007e0:	f043 0320 	orr.w	r3, r3, #32
 80007e4:	6193      	str	r3, [r2, #24]
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_GPIO_Init+0x58>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	f003 0320 	and.w	r3, r3, #32
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_GPIO_Init+0x58>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	4a0d      	ldr	r2, [pc, #52]	; (800082c <MX_GPIO_Init+0x58>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	6193      	str	r3, [r2, #24]
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_GPIO_Init+0x58>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_GPIO_Init+0x58>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	4a07      	ldr	r2, [pc, #28]	; (800082c <MX_GPIO_Init+0x58>)
 8000810:	f043 0308 	orr.w	r3, r3, #8
 8000814:	6193      	str	r3, [r2, #24]
 8000816:	4b05      	ldr	r3, [pc, #20]	; (800082c <MX_GPIO_Init+0x58>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	f003 0308 	and.w	r3, r3, #8
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

}
 8000822:	bf00      	nop
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr
 800082c:	40021000 	.word	0x40021000

08000830 <main>:
  */



int main(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000834:	f000 fa82 	bl	8000d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000838:	f000 f816 	bl	8000868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083c:	f7ff ffca 	bl	80007d4 <MX_GPIO_Init>
  MX_CRC_Init();
 8000840:	f7ff ff7e 	bl	8000740 <MX_CRC_Init>
  MX_USART2_UART_Init();
 8000844:	f000 f948 	bl	8000ad8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000848:	f000 f970 	bl	8000b2c <MX_USART3_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Welcome from my BootLoader\n");
 800084c:	4805      	ldr	r0, [pc, #20]	; (8000864 <main+0x34>)
 800084e:	f001 fe63 	bl	8002518 <puts>
	  printf("Welcome from my BootLoader\n");
 8000852:	4804      	ldr	r0, [pc, #16]	; (8000864 <main+0x34>)
 8000854:	f001 fe60 	bl	8002518 <puts>
	  printf("Welcome from my BootLoader\n");
 8000858:	4802      	ldr	r0, [pc, #8]	; (8000864 <main+0x34>)
 800085a:	f001 fe5d 	bl	8002518 <puts>

	  BL_fetch_host_command();
 800085e:	f7ff fc75 	bl	800014c <BL_fetch_host_command>
	  printf("Welcome from my BootLoader\n");
 8000862:	e7f3      	b.n	800084c <main+0x1c>
 8000864:	08003588 	.word	0x08003588

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b090      	sub	sp, #64	; 0x40
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 0318 	add.w	r3, r7, #24
 8000872:	2228      	movs	r2, #40	; 0x28
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f001 fdc0 	bl	80023fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800088a:	2301      	movs	r3, #1
 800088c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800088e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000892:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000898:	2301      	movs	r3, #1
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089c:	2302      	movs	r3, #2
 800089e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ac:	f107 0318 	add.w	r3, r7, #24
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 fed5 	bl	8001660 <HAL_RCC_OscConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80008bc:	f000 f819 	bl	80008f2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c0:	230f      	movs	r3, #15
 80008c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c4:	2302      	movs	r3, #2
 80008c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2102      	movs	r1, #2
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 f942 	bl	8001b64 <HAL_RCC_ClockConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80008e6:	f000 f804 	bl	80008f2 <Error_Handler>
  }
}
 80008ea:	bf00      	nop
 80008ec:	3740      	adds	r7, #64	; 0x40
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008f6:	b672      	cpsid	i
}
 80008f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fa:	e7fe      	b.n	80008fa <Error_Handler+0x8>

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <HAL_MspInit+0x40>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	4a0d      	ldr	r2, [pc, #52]	; (800093c <HAL_MspInit+0x40>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6193      	str	r3, [r2, #24]
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <HAL_MspInit+0x40>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <HAL_MspInit+0x40>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	4a07      	ldr	r2, [pc, #28]	; (800093c <HAL_MspInit+0x40>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000924:	61d3      	str	r3, [r2, #28]
 8000926:	4b05      	ldr	r3, [pc, #20]	; (800093c <HAL_MspInit+0x40>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	40021000 	.word	0x40021000

08000940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <NMI_Handler+0x4>

08000946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <HardFault_Handler+0x4>

0800094c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <MemManage_Handler+0x4>

08000952 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <BusFault_Handler+0x4>

08000958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <UsageFault_Handler+0x4>

0800095e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr

0800096a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr

08000976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr

08000982 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000986:	f000 fa1f 	bl	8000dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}

0800098e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b086      	sub	sp, #24
 8000992:	af00      	add	r7, sp, #0
 8000994:	60f8      	str	r0, [r7, #12]
 8000996:	60b9      	str	r1, [r7, #8]
 8000998:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
 800099e:	e00a      	b.n	80009b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009a0:	f3af 8000 	nop.w
 80009a4:	4601      	mov	r1, r0
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	1c5a      	adds	r2, r3, #1
 80009aa:	60ba      	str	r2, [r7, #8]
 80009ac:	b2ca      	uxtb	r2, r1
 80009ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	3301      	adds	r3, #1
 80009b4:	617b      	str	r3, [r7, #20]
 80009b6:	697a      	ldr	r2, [r7, #20]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	429a      	cmp	r2, r3
 80009bc:	dbf0      	blt.n	80009a0 <_read+0x12>
  }

  return len;
 80009be:	687b      	ldr	r3, [r7, #4]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3718      	adds	r7, #24
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	e009      	b.n	80009ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	1c5a      	adds	r2, r3, #1
 80009de:	60ba      	str	r2, [r7, #8]
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff fe96 	bl	8000714 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	3301      	adds	r3, #1
 80009ec:	617b      	str	r3, [r7, #20]
 80009ee:	697a      	ldr	r2, [r7, #20]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	dbf1      	blt.n	80009da <_write+0x12>
  }
  return len;
 80009f6:	687b      	ldr	r3, [r7, #4]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <_close>:

int _close(int file)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr

08000a16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
 8000a1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a26:	605a      	str	r2, [r3, #4]
  return 0;
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr

08000a34 <_isatty>:

int _isatty(int file)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a3c:	2301      	movs	r3, #1
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a68:	4a14      	ldr	r2, [pc, #80]	; (8000abc <_sbrk+0x5c>)
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <_sbrk+0x60>)
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a74:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <_sbrk+0x64>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d102      	bne.n	8000a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <_sbrk+0x64>)
 8000a7e:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <_sbrk+0x68>)
 8000a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <_sbrk+0x64>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4413      	add	r3, r2
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d207      	bcs.n	8000aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a90:	f001 fc8a 	bl	80023a8 <__errno>
 8000a94:	4603      	mov	r3, r0
 8000a96:	220c      	movs	r2, #12
 8000a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9e:	e009      	b.n	8000ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <_sbrk+0x64>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <_sbrk+0x64>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	4a05      	ldr	r2, [pc, #20]	; (8000ac4 <_sbrk+0x64>)
 8000ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20005000 	.word	0x20005000
 8000ac0:	00000400 	.word	0x00000400
 8000ac4:	200003b4 	.word	0x200003b4
 8000ac8:	20000460 	.word	0x20000460

08000acc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <MX_USART2_UART_Init+0x50>)
 8000ae0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000afe:	220c      	movs	r2, #12
 8000b00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000b10:	f001 f9b6 	bl	8001e80 <HAL_UART_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b1a:	f7ff feea 	bl	80008f2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200003b8 	.word	0x200003b8
 8000b28:	40004400 	.word	0x40004400

08000b2c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_USART3_UART_Init+0x4c>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <MX_USART3_UART_Init+0x50>)
 8000b34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <MX_USART3_UART_Init+0x4c>)
 8000b38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_USART3_UART_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_USART3_UART_Init+0x4c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <MX_USART3_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_USART3_UART_Init+0x4c>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <MX_USART3_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_USART3_UART_Init+0x4c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_USART3_UART_Init+0x4c>)
 8000b64:	f001 f98c 	bl	8001e80 <HAL_UART_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b6e:	f7ff fec0 	bl	80008f2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000400 	.word	0x20000400
 8000b7c:	40004800 	.word	0x40004800

08000b80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0318 	add.w	r3, r7, #24
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a37      	ldr	r2, [pc, #220]	; (8000c78 <HAL_UART_MspInit+0xf8>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d130      	bne.n	8000c02 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ba0:	4b36      	ldr	r3, [pc, #216]	; (8000c7c <HAL_UART_MspInit+0xfc>)
 8000ba2:	69db      	ldr	r3, [r3, #28]
 8000ba4:	4a35      	ldr	r2, [pc, #212]	; (8000c7c <HAL_UART_MspInit+0xfc>)
 8000ba6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000baa:	61d3      	str	r3, [r2, #28]
 8000bac:	4b33      	ldr	r3, [pc, #204]	; (8000c7c <HAL_UART_MspInit+0xfc>)
 8000bae:	69db      	ldr	r3, [r3, #28]
 8000bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	4b30      	ldr	r3, [pc, #192]	; (8000c7c <HAL_UART_MspInit+0xfc>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	4a2f      	ldr	r2, [pc, #188]	; (8000c7c <HAL_UART_MspInit+0xfc>)
 8000bbe:	f043 0304 	orr.w	r3, r3, #4
 8000bc2:	6193      	str	r3, [r2, #24]
 8000bc4:	4b2d      	ldr	r3, [pc, #180]	; (8000c7c <HAL_UART_MspInit+0xfc>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	f003 0304 	and.w	r3, r3, #4
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bd0:	2304      	movs	r3, #4
 8000bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f107 0318 	add.w	r3, r7, #24
 8000be0:	4619      	mov	r1, r3
 8000be2:	4827      	ldr	r0, [pc, #156]	; (8000c80 <HAL_UART_MspInit+0x100>)
 8000be4:	f000 fa62 	bl	80010ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000be8:	2308      	movs	r3, #8
 8000bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	f107 0318 	add.w	r3, r7, #24
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4821      	ldr	r0, [pc, #132]	; (8000c80 <HAL_UART_MspInit+0x100>)
 8000bfc:	f000 fa56 	bl	80010ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c00:	e036      	b.n	8000c70 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a1f      	ldr	r2, [pc, #124]	; (8000c84 <HAL_UART_MspInit+0x104>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d131      	bne.n	8000c70 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <HAL_UART_MspInit+0xfc>)
 8000c0e:	69db      	ldr	r3, [r3, #28]
 8000c10:	4a1a      	ldr	r2, [pc, #104]	; (8000c7c <HAL_UART_MspInit+0xfc>)
 8000c12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c16:	61d3      	str	r3, [r2, #28]
 8000c18:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <HAL_UART_MspInit+0xfc>)
 8000c1a:	69db      	ldr	r3, [r3, #28]
 8000c1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c24:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <HAL_UART_MspInit+0xfc>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <HAL_UART_MspInit+0xfc>)
 8000c2a:	f043 0308 	orr.w	r3, r3, #8
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_UART_MspInit+0xfc>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0308 	and.w	r3, r3, #8
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c46:	2303      	movs	r3, #3
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4a:	f107 0318 	add.w	r3, r7, #24
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480d      	ldr	r0, [pc, #52]	; (8000c88 <HAL_UART_MspInit+0x108>)
 8000c52:	f000 fa2b 	bl	80010ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c64:	f107 0318 	add.w	r3, r7, #24
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4807      	ldr	r0, [pc, #28]	; (8000c88 <HAL_UART_MspInit+0x108>)
 8000c6c:	f000 fa1e 	bl	80010ac <HAL_GPIO_Init>
}
 8000c70:	bf00      	nop
 8000c72:	3728      	adds	r7, #40	; 0x28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40004400 	.word	0x40004400
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40010800 	.word	0x40010800
 8000c84:	40004800 	.word	0x40004800
 8000c88:	40010c00 	.word	0x40010c00

08000c8c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a10      	ldr	r2, [pc, #64]	; (8000cdc <HAL_UART_MspDeInit+0x50>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d10a      	bne.n	8000cb4 <HAL_UART_MspDeInit+0x28>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <HAL_UART_MspDeInit+0x54>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	4a0f      	ldr	r2, [pc, #60]	; (8000ce0 <HAL_UART_MspDeInit+0x54>)
 8000ca4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000ca8:	61d3      	str	r3, [r2, #28]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8000caa:	210c      	movs	r1, #12
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <HAL_UART_MspDeInit+0x58>)
 8000cae:	f000 fb81 	bl	80013b4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 8000cb2:	e00f      	b.n	8000cd4 <HAL_UART_MspDeInit+0x48>
  else if(uartHandle->Instance==USART3)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <HAL_UART_MspDeInit+0x5c>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d10a      	bne.n	8000cd4 <HAL_UART_MspDeInit+0x48>
    __HAL_RCC_USART3_CLK_DISABLE();
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <HAL_UART_MspDeInit+0x54>)
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <HAL_UART_MspDeInit+0x54>)
 8000cc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cc8:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 8000cca:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000cce:	4807      	ldr	r0, [pc, #28]	; (8000cec <HAL_UART_MspDeInit+0x60>)
 8000cd0:	f000 fb70 	bl	80013b4 <HAL_GPIO_DeInit>
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40004400 	.word	0x40004400
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40010800 	.word	0x40010800
 8000ce8:	40004800 	.word	0x40004800
 8000cec:	40010c00 	.word	0x40010c00

08000cf0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cf0:	f7ff feec 	bl	8000acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf4:	480b      	ldr	r0, [pc, #44]	; (8000d24 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cf6:	490c      	ldr	r1, [pc, #48]	; (8000d28 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cf8:	4a0c      	ldr	r2, [pc, #48]	; (8000d2c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cfc:	e002      	b.n	8000d04 <LoopCopyDataInit>

08000cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d02:	3304      	adds	r3, #4

08000d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d08:	d3f9      	bcc.n	8000cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0a:	4a09      	ldr	r2, [pc, #36]	; (8000d30 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d0c:	4c09      	ldr	r4, [pc, #36]	; (8000d34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d10:	e001      	b.n	8000d16 <LoopFillZerobss>

08000d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d14:	3204      	adds	r2, #4

08000d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d18:	d3fb      	bcc.n	8000d12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d1a:	f001 fb4b 	bl	80023b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d1e:	f7ff fd87 	bl	8000830 <main>
  bx lr
 8000d22:	4770      	bx	lr
  ldr r0, =_sdata
 8000d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d28:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 8000d2c:	08003670 	.word	0x08003670
  ldr r2, =_sbss
 8000d30:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8000d34:	2000045c 	.word	0x2000045c

08000d38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d38:	e7fe      	b.n	8000d38 <ADC1_2_IRQHandler>
	...

08000d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <HAL_Init+0x28>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a07      	ldr	r2, [pc, #28]	; (8000d64 <HAL_Init+0x28>)
 8000d46:	f043 0310 	orr.w	r3, r3, #16
 8000d4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4c:	2003      	movs	r0, #3
 8000d4e:	f000 f907 	bl	8000f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d52:	200f      	movs	r0, #15
 8000d54:	f000 f808 	bl	8000d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d58:	f7ff fdd0 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40022000 	.word	0x40022000

08000d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <HAL_InitTick+0x54>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_InitTick+0x58>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 f911 	bl	8000fae <HAL_SYSTICK_Config>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e00e      	b.n	8000db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b0f      	cmp	r3, #15
 8000d9a:	d80a      	bhi.n	8000db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295
 8000da4:	f000 f8e7 	bl	8000f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da8:	4a06      	ldr	r2, [pc, #24]	; (8000dc4 <HAL_InitTick+0x5c>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
 8000db0:	e000      	b.n	8000db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000258 	.word	0x20000258
 8000dc0:	20000260 	.word	0x20000260
 8000dc4:	2000025c 	.word	0x2000025c

08000dc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <HAL_IncTick+0x1c>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <HAL_IncTick+0x20>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	4a03      	ldr	r2, [pc, #12]	; (8000de8 <HAL_IncTick+0x20>)
 8000dda:	6013      	str	r3, [r2, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	20000260 	.word	0x20000260
 8000de8:	20000448 	.word	0x20000448

08000dec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return uwTick;
 8000df0:	4b02      	ldr	r3, [pc, #8]	; (8000dfc <HAL_GetTick+0x10>)
 8000df2:	681b      	ldr	r3, [r3, #0]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	20000448 	.word	0x20000448

08000e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e32:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	60d3      	str	r3, [r2, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <__NVIC_GetPriorityGrouping+0x18>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	f003 0307 	and.w	r3, r3, #7
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	db0a      	blt.n	8000e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	490c      	ldr	r1, [pc, #48]	; (8000eb0 <__NVIC_SetPriority+0x4c>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	0112      	lsls	r2, r2, #4
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	440b      	add	r3, r1
 8000e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e8c:	e00a      	b.n	8000ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4908      	ldr	r1, [pc, #32]	; (8000eb4 <__NVIC_SetPriority+0x50>)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	3b04      	subs	r3, #4
 8000e9c:	0112      	lsls	r2, r2, #4
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	761a      	strb	r2, [r3, #24]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	; 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f1c3 0307 	rsb	r3, r3, #7
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf28      	it	cs
 8000ed6:	2304      	movcs	r3, #4
 8000ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3304      	adds	r3, #4
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d902      	bls.n	8000ee8 <NVIC_EncodePriority+0x30>
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3b03      	subs	r3, #3
 8000ee6:	e000      	b.n	8000eea <NVIC_EncodePriority+0x32>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f00:	f04f 31ff 	mov.w	r1, #4294967295
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	43d9      	mvns	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	4313      	orrs	r3, r2
         );
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3724      	adds	r7, #36	; 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f2c:	d301      	bcc.n	8000f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00f      	b.n	8000f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <SysTick_Config+0x40>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3a:	210f      	movs	r1, #15
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f40:	f7ff ff90 	bl	8000e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <SysTick_Config+0x40>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4a:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <SysTick_Config+0x40>)
 8000f4c:	2207      	movs	r2, #7
 8000f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	e000e010 	.word	0xe000e010

08000f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ff49 	bl	8000e00 <__NVIC_SetPriorityGrouping>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b086      	sub	sp, #24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f88:	f7ff ff5e 	bl	8000e48 <__NVIC_GetPriorityGrouping>
 8000f8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	68b9      	ldr	r1, [r7, #8]
 8000f92:	6978      	ldr	r0, [r7, #20]
 8000f94:	f7ff ff90 	bl	8000eb8 <NVIC_EncodePriority>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff5f 	bl	8000e64 <__NVIC_SetPriority>
}
 8000fa6:	bf00      	nop
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ffb0 	bl	8000f1c <SysTick_Config>
 8000fbc:	4603      	mov	r3, r0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e00e      	b.n	8000ff6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	795b      	ldrb	r3, [r3, #5]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d105      	bne.n	8000fee <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff fbbd 	bl	8000768 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d101      	bne.n	8001010 <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e01f      	b.n	8001050 <HAL_CRC_DeInit+0x52>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	795b      	ldrb	r3, [r3, #5]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b02      	cmp	r3, #2
 8001018:	d101      	bne.n	800101e <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 800101a:	2302      	movs	r3, #2
 800101c:	e018      	b.n	8001050 <HAL_CRC_DeInit+0x52>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2202      	movs	r2, #2
 8001022:	715a      	strb	r2, [r3, #5]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f042 0201 	orr.w	r2, r2, #1
 8001032:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  __HAL_CRC_SET_IDR(hcrc, 0);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2200      	movs	r2, #0
 800103a:	711a      	strb	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff fbb1 	bl	80007a4 <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	715a      	strb	r2, [r3, #5]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001058:	b480      	push	{r7}
 800105a:	b087      	sub	sp, #28
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001064:	2300      	movs	r3, #0
 8001066:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2202      	movs	r2, #2
 800106c:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	e00a      	b.n	800108a <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	68ba      	ldr	r2, [r7, #8]
 800107a:	441a      	add	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	6812      	ldr	r2, [r2, #0]
 8001082:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	3301      	adds	r3, #1
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	429a      	cmp	r2, r3
 8001090:	d3f0      	bcc.n	8001074 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2201      	movs	r2, #1
 800109e:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80010a0:	693b      	ldr	r3, [r7, #16]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	371c      	adds	r7, #28
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b08b      	sub	sp, #44	; 0x2c
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010ba:	2300      	movs	r3, #0
 80010bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010be:	e169      	b.n	8001394 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010c0:	2201      	movs	r2, #1
 80010c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	69fa      	ldr	r2, [r7, #28]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	429a      	cmp	r2, r3
 80010da:	f040 8158 	bne.w	800138e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	4a9a      	ldr	r2, [pc, #616]	; (800134c <HAL_GPIO_Init+0x2a0>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d05e      	beq.n	80011a6 <HAL_GPIO_Init+0xfa>
 80010e8:	4a98      	ldr	r2, [pc, #608]	; (800134c <HAL_GPIO_Init+0x2a0>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d875      	bhi.n	80011da <HAL_GPIO_Init+0x12e>
 80010ee:	4a98      	ldr	r2, [pc, #608]	; (8001350 <HAL_GPIO_Init+0x2a4>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d058      	beq.n	80011a6 <HAL_GPIO_Init+0xfa>
 80010f4:	4a96      	ldr	r2, [pc, #600]	; (8001350 <HAL_GPIO_Init+0x2a4>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d86f      	bhi.n	80011da <HAL_GPIO_Init+0x12e>
 80010fa:	4a96      	ldr	r2, [pc, #600]	; (8001354 <HAL_GPIO_Init+0x2a8>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d052      	beq.n	80011a6 <HAL_GPIO_Init+0xfa>
 8001100:	4a94      	ldr	r2, [pc, #592]	; (8001354 <HAL_GPIO_Init+0x2a8>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d869      	bhi.n	80011da <HAL_GPIO_Init+0x12e>
 8001106:	4a94      	ldr	r2, [pc, #592]	; (8001358 <HAL_GPIO_Init+0x2ac>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d04c      	beq.n	80011a6 <HAL_GPIO_Init+0xfa>
 800110c:	4a92      	ldr	r2, [pc, #584]	; (8001358 <HAL_GPIO_Init+0x2ac>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d863      	bhi.n	80011da <HAL_GPIO_Init+0x12e>
 8001112:	4a92      	ldr	r2, [pc, #584]	; (800135c <HAL_GPIO_Init+0x2b0>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d046      	beq.n	80011a6 <HAL_GPIO_Init+0xfa>
 8001118:	4a90      	ldr	r2, [pc, #576]	; (800135c <HAL_GPIO_Init+0x2b0>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d85d      	bhi.n	80011da <HAL_GPIO_Init+0x12e>
 800111e:	2b12      	cmp	r3, #18
 8001120:	d82a      	bhi.n	8001178 <HAL_GPIO_Init+0xcc>
 8001122:	2b12      	cmp	r3, #18
 8001124:	d859      	bhi.n	80011da <HAL_GPIO_Init+0x12e>
 8001126:	a201      	add	r2, pc, #4	; (adr r2, 800112c <HAL_GPIO_Init+0x80>)
 8001128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800112c:	080011a7 	.word	0x080011a7
 8001130:	08001181 	.word	0x08001181
 8001134:	08001193 	.word	0x08001193
 8001138:	080011d5 	.word	0x080011d5
 800113c:	080011db 	.word	0x080011db
 8001140:	080011db 	.word	0x080011db
 8001144:	080011db 	.word	0x080011db
 8001148:	080011db 	.word	0x080011db
 800114c:	080011db 	.word	0x080011db
 8001150:	080011db 	.word	0x080011db
 8001154:	080011db 	.word	0x080011db
 8001158:	080011db 	.word	0x080011db
 800115c:	080011db 	.word	0x080011db
 8001160:	080011db 	.word	0x080011db
 8001164:	080011db 	.word	0x080011db
 8001168:	080011db 	.word	0x080011db
 800116c:	080011db 	.word	0x080011db
 8001170:	08001189 	.word	0x08001189
 8001174:	0800119d 	.word	0x0800119d
 8001178:	4a79      	ldr	r2, [pc, #484]	; (8001360 <HAL_GPIO_Init+0x2b4>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d013      	beq.n	80011a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800117e:	e02c      	b.n	80011da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	623b      	str	r3, [r7, #32]
          break;
 8001186:	e029      	b.n	80011dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	3304      	adds	r3, #4
 800118e:	623b      	str	r3, [r7, #32]
          break;
 8001190:	e024      	b.n	80011dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	3308      	adds	r3, #8
 8001198:	623b      	str	r3, [r7, #32]
          break;
 800119a:	e01f      	b.n	80011dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	330c      	adds	r3, #12
 80011a2:	623b      	str	r3, [r7, #32]
          break;
 80011a4:	e01a      	b.n	80011dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d102      	bne.n	80011b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011ae:	2304      	movs	r3, #4
 80011b0:	623b      	str	r3, [r7, #32]
          break;
 80011b2:	e013      	b.n	80011dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d105      	bne.n	80011c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011bc:	2308      	movs	r3, #8
 80011be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69fa      	ldr	r2, [r7, #28]
 80011c4:	611a      	str	r2, [r3, #16]
          break;
 80011c6:	e009      	b.n	80011dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011c8:	2308      	movs	r3, #8
 80011ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69fa      	ldr	r2, [r7, #28]
 80011d0:	615a      	str	r2, [r3, #20]
          break;
 80011d2:	e003      	b.n	80011dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
          break;
 80011d8:	e000      	b.n	80011dc <HAL_GPIO_Init+0x130>
          break;
 80011da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	2bff      	cmp	r3, #255	; 0xff
 80011e0:	d801      	bhi.n	80011e6 <HAL_GPIO_Init+0x13a>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	e001      	b.n	80011ea <HAL_GPIO_Init+0x13e>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3304      	adds	r3, #4
 80011ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	2bff      	cmp	r3, #255	; 0xff
 80011f0:	d802      	bhi.n	80011f8 <HAL_GPIO_Init+0x14c>
 80011f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	e002      	b.n	80011fe <HAL_GPIO_Init+0x152>
 80011f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fa:	3b08      	subs	r3, #8
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	210f      	movs	r1, #15
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	fa01 f303 	lsl.w	r3, r1, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	401a      	ands	r2, r3
 8001210:	6a39      	ldr	r1, [r7, #32]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	fa01 f303 	lsl.w	r3, r1, r3
 8001218:	431a      	orrs	r2, r3
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 80b1 	beq.w	800138e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800122c:	4b4d      	ldr	r3, [pc, #308]	; (8001364 <HAL_GPIO_Init+0x2b8>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	4a4c      	ldr	r2, [pc, #304]	; (8001364 <HAL_GPIO_Init+0x2b8>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	6193      	str	r3, [r2, #24]
 8001238:	4b4a      	ldr	r3, [pc, #296]	; (8001364 <HAL_GPIO_Init+0x2b8>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001244:	4a48      	ldr	r2, [pc, #288]	; (8001368 <HAL_GPIO_Init+0x2bc>)
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	089b      	lsrs	r3, r3, #2
 800124a:	3302      	adds	r3, #2
 800124c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001250:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	220f      	movs	r2, #15
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	4013      	ands	r3, r2
 8001266:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a40      	ldr	r2, [pc, #256]	; (800136c <HAL_GPIO_Init+0x2c0>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d013      	beq.n	8001298 <HAL_GPIO_Init+0x1ec>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a3f      	ldr	r2, [pc, #252]	; (8001370 <HAL_GPIO_Init+0x2c4>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d00d      	beq.n	8001294 <HAL_GPIO_Init+0x1e8>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a3e      	ldr	r2, [pc, #248]	; (8001374 <HAL_GPIO_Init+0x2c8>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d007      	beq.n	8001290 <HAL_GPIO_Init+0x1e4>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a3d      	ldr	r2, [pc, #244]	; (8001378 <HAL_GPIO_Init+0x2cc>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d101      	bne.n	800128c <HAL_GPIO_Init+0x1e0>
 8001288:	2303      	movs	r3, #3
 800128a:	e006      	b.n	800129a <HAL_GPIO_Init+0x1ee>
 800128c:	2304      	movs	r3, #4
 800128e:	e004      	b.n	800129a <HAL_GPIO_Init+0x1ee>
 8001290:	2302      	movs	r3, #2
 8001292:	e002      	b.n	800129a <HAL_GPIO_Init+0x1ee>
 8001294:	2301      	movs	r3, #1
 8001296:	e000      	b.n	800129a <HAL_GPIO_Init+0x1ee>
 8001298:	2300      	movs	r3, #0
 800129a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800129c:	f002 0203 	and.w	r2, r2, #3
 80012a0:	0092      	lsls	r2, r2, #2
 80012a2:	4093      	lsls	r3, r2
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012aa:	492f      	ldr	r1, [pc, #188]	; (8001368 <HAL_GPIO_Init+0x2bc>)
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	089b      	lsrs	r3, r3, #2
 80012b0:	3302      	adds	r3, #2
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d006      	beq.n	80012d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012c4:	4b2d      	ldr	r3, [pc, #180]	; (800137c <HAL_GPIO_Init+0x2d0>)
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	492c      	ldr	r1, [pc, #176]	; (800137c <HAL_GPIO_Init+0x2d0>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	608b      	str	r3, [r1, #8]
 80012d0:	e006      	b.n	80012e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012d2:	4b2a      	ldr	r3, [pc, #168]	; (800137c <HAL_GPIO_Init+0x2d0>)
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	43db      	mvns	r3, r3
 80012da:	4928      	ldr	r1, [pc, #160]	; (800137c <HAL_GPIO_Init+0x2d0>)
 80012dc:	4013      	ands	r3, r2
 80012de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d006      	beq.n	80012fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012ec:	4b23      	ldr	r3, [pc, #140]	; (800137c <HAL_GPIO_Init+0x2d0>)
 80012ee:	68da      	ldr	r2, [r3, #12]
 80012f0:	4922      	ldr	r1, [pc, #136]	; (800137c <HAL_GPIO_Init+0x2d0>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	60cb      	str	r3, [r1, #12]
 80012f8:	e006      	b.n	8001308 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012fa:	4b20      	ldr	r3, [pc, #128]	; (800137c <HAL_GPIO_Init+0x2d0>)
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	43db      	mvns	r3, r3
 8001302:	491e      	ldr	r1, [pc, #120]	; (800137c <HAL_GPIO_Init+0x2d0>)
 8001304:	4013      	ands	r3, r2
 8001306:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d006      	beq.n	8001322 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001314:	4b19      	ldr	r3, [pc, #100]	; (800137c <HAL_GPIO_Init+0x2d0>)
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	4918      	ldr	r1, [pc, #96]	; (800137c <HAL_GPIO_Init+0x2d0>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	604b      	str	r3, [r1, #4]
 8001320:	e006      	b.n	8001330 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001322:	4b16      	ldr	r3, [pc, #88]	; (800137c <HAL_GPIO_Init+0x2d0>)
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	43db      	mvns	r3, r3
 800132a:	4914      	ldr	r1, [pc, #80]	; (800137c <HAL_GPIO_Init+0x2d0>)
 800132c:	4013      	ands	r3, r2
 800132e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d021      	beq.n	8001380 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <HAL_GPIO_Init+0x2d0>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	490e      	ldr	r1, [pc, #56]	; (800137c <HAL_GPIO_Init+0x2d0>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	600b      	str	r3, [r1, #0]
 8001348:	e021      	b.n	800138e <HAL_GPIO_Init+0x2e2>
 800134a:	bf00      	nop
 800134c:	10320000 	.word	0x10320000
 8001350:	10310000 	.word	0x10310000
 8001354:	10220000 	.word	0x10220000
 8001358:	10210000 	.word	0x10210000
 800135c:	10120000 	.word	0x10120000
 8001360:	10110000 	.word	0x10110000
 8001364:	40021000 	.word	0x40021000
 8001368:	40010000 	.word	0x40010000
 800136c:	40010800 	.word	0x40010800
 8001370:	40010c00 	.word	0x40010c00
 8001374:	40011000 	.word	0x40011000
 8001378:	40011400 	.word	0x40011400
 800137c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001380:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <HAL_GPIO_Init+0x304>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	43db      	mvns	r3, r3
 8001388:	4909      	ldr	r1, [pc, #36]	; (80013b0 <HAL_GPIO_Init+0x304>)
 800138a:	4013      	ands	r3, r2
 800138c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	3301      	adds	r3, #1
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	fa22 f303 	lsr.w	r3, r2, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f47f ae8e 	bne.w	80010c0 <HAL_GPIO_Init+0x14>
  }
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	372c      	adds	r7, #44	; 0x2c
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	40010400 	.word	0x40010400

080013b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	; 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80013c2:	e09a      	b.n	80014fa <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80013c4:	2201      	movs	r2, #1
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 808d 	beq.w	80014f4 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80013da:	4a4e      	ldr	r2, [pc, #312]	; (8001514 <HAL_GPIO_DeInit+0x160>)
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	089b      	lsrs	r3, r3, #2
 80013e0:	3302      	adds	r3, #2
 80013e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e6:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	220f      	movs	r2, #15
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	4013      	ands	r3, r2
 80013fa:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a46      	ldr	r2, [pc, #280]	; (8001518 <HAL_GPIO_DeInit+0x164>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d013      	beq.n	800142c <HAL_GPIO_DeInit+0x78>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a45      	ldr	r2, [pc, #276]	; (800151c <HAL_GPIO_DeInit+0x168>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d00d      	beq.n	8001428 <HAL_GPIO_DeInit+0x74>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a44      	ldr	r2, [pc, #272]	; (8001520 <HAL_GPIO_DeInit+0x16c>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d007      	beq.n	8001424 <HAL_GPIO_DeInit+0x70>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a43      	ldr	r2, [pc, #268]	; (8001524 <HAL_GPIO_DeInit+0x170>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d101      	bne.n	8001420 <HAL_GPIO_DeInit+0x6c>
 800141c:	2303      	movs	r3, #3
 800141e:	e006      	b.n	800142e <HAL_GPIO_DeInit+0x7a>
 8001420:	2304      	movs	r3, #4
 8001422:	e004      	b.n	800142e <HAL_GPIO_DeInit+0x7a>
 8001424:	2302      	movs	r3, #2
 8001426:	e002      	b.n	800142e <HAL_GPIO_DeInit+0x7a>
 8001428:	2301      	movs	r3, #1
 800142a:	e000      	b.n	800142e <HAL_GPIO_DeInit+0x7a>
 800142c:	2300      	movs	r3, #0
 800142e:	69fa      	ldr	r2, [r7, #28]
 8001430:	f002 0203 	and.w	r2, r2, #3
 8001434:	0092      	lsls	r2, r2, #2
 8001436:	4093      	lsls	r3, r2
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	429a      	cmp	r2, r3
 800143c:	d132      	bne.n	80014a4 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800143e:	4b3a      	ldr	r3, [pc, #232]	; (8001528 <HAL_GPIO_DeInit+0x174>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	43db      	mvns	r3, r3
 8001446:	4938      	ldr	r1, [pc, #224]	; (8001528 <HAL_GPIO_DeInit+0x174>)
 8001448:	4013      	ands	r3, r2
 800144a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800144c:	4b36      	ldr	r3, [pc, #216]	; (8001528 <HAL_GPIO_DeInit+0x174>)
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	43db      	mvns	r3, r3
 8001454:	4934      	ldr	r1, [pc, #208]	; (8001528 <HAL_GPIO_DeInit+0x174>)
 8001456:	4013      	ands	r3, r2
 8001458:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800145a:	4b33      	ldr	r3, [pc, #204]	; (8001528 <HAL_GPIO_DeInit+0x174>)
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	43db      	mvns	r3, r3
 8001462:	4931      	ldr	r1, [pc, #196]	; (8001528 <HAL_GPIO_DeInit+0x174>)
 8001464:	4013      	ands	r3, r2
 8001466:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001468:	4b2f      	ldr	r3, [pc, #188]	; (8001528 <HAL_GPIO_DeInit+0x174>)
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	43db      	mvns	r3, r3
 8001470:	492d      	ldr	r1, [pc, #180]	; (8001528 <HAL_GPIO_DeInit+0x174>)
 8001472:	4013      	ands	r3, r2
 8001474:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	220f      	movs	r2, #15
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001486:	4a23      	ldr	r2, [pc, #140]	; (8001514 <HAL_GPIO_DeInit+0x160>)
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	089b      	lsrs	r3, r3, #2
 800148c:	3302      	adds	r3, #2
 800148e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	43da      	mvns	r2, r3
 8001496:	481f      	ldr	r0, [pc, #124]	; (8001514 <HAL_GPIO_DeInit+0x160>)
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	089b      	lsrs	r3, r3, #2
 800149c:	400a      	ands	r2, r1
 800149e:	3302      	adds	r3, #2
 80014a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	2bff      	cmp	r3, #255	; 0xff
 80014a8:	d801      	bhi.n	80014ae <HAL_GPIO_DeInit+0xfa>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	e001      	b.n	80014b2 <HAL_GPIO_DeInit+0xfe>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3304      	adds	r3, #4
 80014b2:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	2bff      	cmp	r3, #255	; 0xff
 80014b8:	d802      	bhi.n	80014c0 <HAL_GPIO_DeInit+0x10c>
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	e002      	b.n	80014c6 <HAL_GPIO_DeInit+0x112>
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	3b08      	subs	r3, #8
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	210f      	movs	r1, #15
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	fa01 f303 	lsl.w	r3, r1, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	401a      	ands	r2, r3
 80014d8:	2104      	movs	r1, #4
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	fa01 f303 	lsl.w	r3, r1, r3
 80014e0:	431a      	orrs	r2, r3
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68da      	ldr	r2, [r3, #12]
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	43db      	mvns	r3, r3
 80014ee:	401a      	ands	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	60da      	str	r2, [r3, #12]
    }

    position++;
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	3301      	adds	r3, #1
 80014f8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	f47f af5e 	bne.w	80013c4 <HAL_GPIO_DeInit+0x10>
  }
}
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	3724      	adds	r7, #36	; 0x24
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	40010000 	.word	0x40010000
 8001518:	40010800 	.word	0x40010800
 800151c:	40010c00 	.word	0x40010c00
 8001520:	40011000 	.word	0x40011000
 8001524:	40011400 	.word	0x40011400
 8001528:	40010400 	.word	0x40010400

0800152c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001532:	f7ff fc5b 	bl	8000dec <HAL_GetTick>
 8001536:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001538:	4b45      	ldr	r3, [pc, #276]	; (8001650 <HAL_RCC_DeInit+0x124>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a44      	ldr	r2, [pc, #272]	; (8001650 <HAL_RCC_DeInit+0x124>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001544:	e008      	b.n	8001558 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001546:	f7ff fc51 	bl	8000dec <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e077      	b.n	8001648 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001558:	4b3d      	ldr	r3, [pc, #244]	; (8001650 <HAL_RCC_DeInit+0x124>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0f0      	beq.n	8001546 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8001564:	4b3a      	ldr	r3, [pc, #232]	; (8001650 <HAL_RCC_DeInit+0x124>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800156c:	4a38      	ldr	r2, [pc, #224]	; (8001650 <HAL_RCC_DeInit+0x124>)
 800156e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001572:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001574:	f7ff fc3a 	bl	8000dec <HAL_GetTick>
 8001578:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800157a:	4b35      	ldr	r3, [pc, #212]	; (8001650 <HAL_RCC_DeInit+0x124>)
 800157c:	2200      	movs	r2, #0
 800157e:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001580:	e00a      	b.n	8001598 <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001582:	f7ff fc33 	bl	8000dec <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001590:	4293      	cmp	r3, r2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e057      	b.n	8001648 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001598:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <HAL_RCC_DeInit+0x124>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f003 030c 	and.w	r3, r3, #12
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1ee      	bne.n	8001582 <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80015a4:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <HAL_RCC_DeInit+0x128>)
 80015a6:	4a2c      	ldr	r2, [pc, #176]	; (8001658 <HAL_RCC_DeInit+0x12c>)
 80015a8:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80015aa:	4b2c      	ldr	r3, [pc, #176]	; (800165c <HAL_RCC_DeInit+0x130>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fbda 	bl	8000d68 <HAL_InitTick>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e044      	b.n	8001648 <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80015be:	f7ff fc15 	bl	8000dec <HAL_GetTick>
 80015c2:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80015c4:	4b22      	ldr	r3, [pc, #136]	; (8001650 <HAL_RCC_DeInit+0x124>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a21      	ldr	r2, [pc, #132]	; (8001650 <HAL_RCC_DeInit+0x124>)
 80015ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015ce:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d2:	f7ff fc0b 	bl	8000dec <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e031      	b.n	8001648 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <HAL_RCC_DeInit+0x124>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f0      	bne.n	80015d2 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 80015f0:	4b17      	ldr	r3, [pc, #92]	; (8001650 <HAL_RCC_DeInit+0x124>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80015f6:	f7ff fbf9 	bl	8000dec <HAL_GetTick>
 80015fa:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <HAL_RCC_DeInit+0x124>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a13      	ldr	r2, [pc, #76]	; (8001650 <HAL_RCC_DeInit+0x124>)
 8001602:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001606:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001608:	e008      	b.n	800161c <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800160a:	f7ff fbef 	bl	8000dec <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b64      	cmp	r3, #100	; 0x64
 8001616:	d901      	bls.n	800161c <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e015      	b.n	8001648 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <HAL_RCC_DeInit+0x124>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1f0      	bne.n	800160a <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <HAL_RCC_DeInit+0x124>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a08      	ldr	r2, [pc, #32]	; (8001650 <HAL_RCC_DeInit+0x124>)
 800162e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001632:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_RCC_DeInit+0x124>)
 8001636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001638:	4a05      	ldr	r2, [pc, #20]	; (8001650 <HAL_RCC_DeInit+0x124>)
 800163a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800163e:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <HAL_RCC_DeInit+0x124>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40021000 	.word	0x40021000
 8001654:	20000258 	.word	0x20000258
 8001658:	007a1200 	.word	0x007a1200
 800165c:	2000025c 	.word	0x2000025c

08001660 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e272      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 8087 	beq.w	800178e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001680:	4b92      	ldr	r3, [pc, #584]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 030c 	and.w	r3, r3, #12
 8001688:	2b04      	cmp	r3, #4
 800168a:	d00c      	beq.n	80016a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800168c:	4b8f      	ldr	r3, [pc, #572]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 030c 	and.w	r3, r3, #12
 8001694:	2b08      	cmp	r3, #8
 8001696:	d112      	bne.n	80016be <HAL_RCC_OscConfig+0x5e>
 8001698:	4b8c      	ldr	r3, [pc, #560]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a4:	d10b      	bne.n	80016be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a6:	4b89      	ldr	r3, [pc, #548]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d06c      	beq.n	800178c <HAL_RCC_OscConfig+0x12c>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d168      	bne.n	800178c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e24c      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c6:	d106      	bne.n	80016d6 <HAL_RCC_OscConfig+0x76>
 80016c8:	4b80      	ldr	r3, [pc, #512]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a7f      	ldr	r2, [pc, #508]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 80016ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	e02e      	b.n	8001734 <HAL_RCC_OscConfig+0xd4>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10c      	bne.n	80016f8 <HAL_RCC_OscConfig+0x98>
 80016de:	4b7b      	ldr	r3, [pc, #492]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a7a      	ldr	r2, [pc, #488]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 80016e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	4b78      	ldr	r3, [pc, #480]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a77      	ldr	r2, [pc, #476]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 80016f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	e01d      	b.n	8001734 <HAL_RCC_OscConfig+0xd4>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001700:	d10c      	bne.n	800171c <HAL_RCC_OscConfig+0xbc>
 8001702:	4b72      	ldr	r3, [pc, #456]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a71      	ldr	r2, [pc, #452]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 8001708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b6f      	ldr	r3, [pc, #444]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a6e      	ldr	r2, [pc, #440]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 8001714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	e00b      	b.n	8001734 <HAL_RCC_OscConfig+0xd4>
 800171c:	4b6b      	ldr	r3, [pc, #428]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a6a      	ldr	r2, [pc, #424]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 8001722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	4b68      	ldr	r3, [pc, #416]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a67      	ldr	r2, [pc, #412]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 800172e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001732:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d013      	beq.n	8001764 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7ff fb56 	bl	8000dec <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001744:	f7ff fb52 	bl	8000dec <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b64      	cmp	r3, #100	; 0x64
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e200      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001756:	4b5d      	ldr	r3, [pc, #372]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0xe4>
 8001762:	e014      	b.n	800178e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7ff fb42 	bl	8000dec <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800176c:	f7ff fb3e 	bl	8000dec <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b64      	cmp	r3, #100	; 0x64
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e1ec      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177e:	4b53      	ldr	r3, [pc, #332]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f0      	bne.n	800176c <HAL_RCC_OscConfig+0x10c>
 800178a:	e000      	b.n	800178e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d063      	beq.n	8001862 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800179a:	4b4c      	ldr	r3, [pc, #304]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 030c 	and.w	r3, r3, #12
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00b      	beq.n	80017be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017a6:	4b49      	ldr	r3, [pc, #292]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 030c 	and.w	r3, r3, #12
 80017ae:	2b08      	cmp	r3, #8
 80017b0:	d11c      	bne.n	80017ec <HAL_RCC_OscConfig+0x18c>
 80017b2:	4b46      	ldr	r3, [pc, #280]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d116      	bne.n	80017ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017be:	4b43      	ldr	r3, [pc, #268]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d005      	beq.n	80017d6 <HAL_RCC_OscConfig+0x176>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d001      	beq.n	80017d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e1c0      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d6:	4b3d      	ldr	r3, [pc, #244]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4939      	ldr	r1, [pc, #228]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ea:	e03a      	b.n	8001862 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d020      	beq.n	8001836 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017f4:	4b36      	ldr	r3, [pc, #216]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fa:	f7ff faf7 	bl	8000dec <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001802:	f7ff faf3 	bl	8000dec <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e1a1      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001814:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001820:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	4927      	ldr	r1, [pc, #156]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 8001830:	4313      	orrs	r3, r2
 8001832:	600b      	str	r3, [r1, #0]
 8001834:	e015      	b.n	8001862 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001836:	4b26      	ldr	r3, [pc, #152]	; (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183c:	f7ff fad6 	bl	8000dec <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001844:	f7ff fad2 	bl	8000dec <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e180      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001856:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d03a      	beq.n	80018e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d019      	beq.n	80018aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001876:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <HAL_RCC_OscConfig+0x274>)
 8001878:	2201      	movs	r2, #1
 800187a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187c:	f7ff fab6 	bl	8000dec <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001884:	f7ff fab2 	bl	8000dec <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e160      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001896:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <HAL_RCC_OscConfig+0x26c>)
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018a2:	2001      	movs	r0, #1
 80018a4:	f000 face 	bl	8001e44 <RCC_Delay>
 80018a8:	e01c      	b.n	80018e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018aa:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <HAL_RCC_OscConfig+0x274>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b0:	f7ff fa9c 	bl	8000dec <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b6:	e00f      	b.n	80018d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b8:	f7ff fa98 	bl	8000dec <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d908      	bls.n	80018d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e146      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000
 80018d0:	42420000 	.word	0x42420000
 80018d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d8:	4b92      	ldr	r3, [pc, #584]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 80018da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1e9      	bne.n	80018b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 80a6 	beq.w	8001a3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018f2:	2300      	movs	r3, #0
 80018f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018f6:	4b8b      	ldr	r3, [pc, #556]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10d      	bne.n	800191e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001902:	4b88      	ldr	r3, [pc, #544]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	4a87      	ldr	r2, [pc, #540]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190c:	61d3      	str	r3, [r2, #28]
 800190e:	4b85      	ldr	r3, [pc, #532]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800191a:	2301      	movs	r3, #1
 800191c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191e:	4b82      	ldr	r3, [pc, #520]	; (8001b28 <HAL_RCC_OscConfig+0x4c8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001926:	2b00      	cmp	r3, #0
 8001928:	d118      	bne.n	800195c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800192a:	4b7f      	ldr	r3, [pc, #508]	; (8001b28 <HAL_RCC_OscConfig+0x4c8>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a7e      	ldr	r2, [pc, #504]	; (8001b28 <HAL_RCC_OscConfig+0x4c8>)
 8001930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001934:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001936:	f7ff fa59 	bl	8000dec <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800193e:	f7ff fa55 	bl	8000dec <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b64      	cmp	r3, #100	; 0x64
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e103      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001950:	4b75      	ldr	r3, [pc, #468]	; (8001b28 <HAL_RCC_OscConfig+0x4c8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0f0      	beq.n	800193e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d106      	bne.n	8001972 <HAL_RCC_OscConfig+0x312>
 8001964:	4b6f      	ldr	r3, [pc, #444]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	4a6e      	ldr	r2, [pc, #440]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	6213      	str	r3, [r2, #32]
 8001970:	e02d      	b.n	80019ce <HAL_RCC_OscConfig+0x36e>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10c      	bne.n	8001994 <HAL_RCC_OscConfig+0x334>
 800197a:	4b6a      	ldr	r3, [pc, #424]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	4a69      	ldr	r2, [pc, #420]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001980:	f023 0301 	bic.w	r3, r3, #1
 8001984:	6213      	str	r3, [r2, #32]
 8001986:	4b67      	ldr	r3, [pc, #412]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	4a66      	ldr	r2, [pc, #408]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 800198c:	f023 0304 	bic.w	r3, r3, #4
 8001990:	6213      	str	r3, [r2, #32]
 8001992:	e01c      	b.n	80019ce <HAL_RCC_OscConfig+0x36e>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	2b05      	cmp	r3, #5
 800199a:	d10c      	bne.n	80019b6 <HAL_RCC_OscConfig+0x356>
 800199c:	4b61      	ldr	r3, [pc, #388]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	4a60      	ldr	r2, [pc, #384]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 80019a2:	f043 0304 	orr.w	r3, r3, #4
 80019a6:	6213      	str	r3, [r2, #32]
 80019a8:	4b5e      	ldr	r3, [pc, #376]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	4a5d      	ldr	r2, [pc, #372]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	6213      	str	r3, [r2, #32]
 80019b4:	e00b      	b.n	80019ce <HAL_RCC_OscConfig+0x36e>
 80019b6:	4b5b      	ldr	r3, [pc, #364]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	4a5a      	ldr	r2, [pc, #360]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 80019bc:	f023 0301 	bic.w	r3, r3, #1
 80019c0:	6213      	str	r3, [r2, #32]
 80019c2:	4b58      	ldr	r3, [pc, #352]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	4a57      	ldr	r2, [pc, #348]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 80019c8:	f023 0304 	bic.w	r3, r3, #4
 80019cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d015      	beq.n	8001a02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d6:	f7ff fa09 	bl	8000dec <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019dc:	e00a      	b.n	80019f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019de:	f7ff fa05 	bl	8000dec <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e0b1      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f4:	4b4b      	ldr	r3, [pc, #300]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0ee      	beq.n	80019de <HAL_RCC_OscConfig+0x37e>
 8001a00:	e014      	b.n	8001a2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a02:	f7ff f9f3 	bl	8000dec <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a08:	e00a      	b.n	8001a20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a0a:	f7ff f9ef 	bl	8000dec <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e09b      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a20:	4b40      	ldr	r3, [pc, #256]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1ee      	bne.n	8001a0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a2c:	7dfb      	ldrb	r3, [r7, #23]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d105      	bne.n	8001a3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a32:	4b3c      	ldr	r3, [pc, #240]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	4a3b      	ldr	r2, [pc, #236]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 8087 	beq.w	8001b56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a48:	4b36      	ldr	r3, [pc, #216]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 030c 	and.w	r3, r3, #12
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d061      	beq.n	8001b18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d146      	bne.n	8001aea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5c:	4b33      	ldr	r3, [pc, #204]	; (8001b2c <HAL_RCC_OscConfig+0x4cc>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a62:	f7ff f9c3 	bl	8000dec <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a6a:	f7ff f9bf 	bl	8000dec <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e06d      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7c:	4b29      	ldr	r3, [pc, #164]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1f0      	bne.n	8001a6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a90:	d108      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a92:	4b24      	ldr	r3, [pc, #144]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	4921      	ldr	r1, [pc, #132]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a19      	ldr	r1, [r3, #32]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	430b      	orrs	r3, r1
 8001ab6:	491b      	ldr	r1, [pc, #108]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001abc:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <HAL_RCC_OscConfig+0x4cc>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac2:	f7ff f993 	bl	8000dec <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aca:	f7ff f98f 	bl	8000dec <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e03d      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x46a>
 8001ae8:	e035      	b.n	8001b56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aea:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <HAL_RCC_OscConfig+0x4cc>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7ff f97c 	bl	8000dec <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af8:	f7ff f978 	bl	8000dec <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e026      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0x498>
 8001b16:	e01e      	b.n	8001b56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69db      	ldr	r3, [r3, #28]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d107      	bne.n	8001b30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e019      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40007000 	.word	0x40007000
 8001b2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_RCC_OscConfig+0x500>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d106      	bne.n	8001b52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d001      	beq.n	8001b56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40021000 	.word	0x40021000

08001b64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0d0      	b.n	8001d1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b78:	4b6a      	ldr	r3, [pc, #424]	; (8001d24 <HAL_RCC_ClockConfig+0x1c0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d910      	bls.n	8001ba8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b86:	4b67      	ldr	r3, [pc, #412]	; (8001d24 <HAL_RCC_ClockConfig+0x1c0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f023 0207 	bic.w	r2, r3, #7
 8001b8e:	4965      	ldr	r1, [pc, #404]	; (8001d24 <HAL_RCC_ClockConfig+0x1c0>)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b96:	4b63      	ldr	r3, [pc, #396]	; (8001d24 <HAL_RCC_ClockConfig+0x1c0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d001      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0b8      	b.n	8001d1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d020      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d005      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bc0:	4b59      	ldr	r3, [pc, #356]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	4a58      	ldr	r2, [pc, #352]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d005      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bd8:	4b53      	ldr	r3, [pc, #332]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	4a52      	ldr	r2, [pc, #328]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001be2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be4:	4b50      	ldr	r3, [pc, #320]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	494d      	ldr	r1, [pc, #308]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d040      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d107      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0a:	4b47      	ldr	r3, [pc, #284]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d115      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e07f      	b.n	8001d1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d107      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c22:	4b41      	ldr	r3, [pc, #260]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d109      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e073      	b.n	8001d1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c32:	4b3d      	ldr	r3, [pc, #244]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e06b      	b.n	8001d1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c42:	4b39      	ldr	r3, [pc, #228]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f023 0203 	bic.w	r2, r3, #3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	4936      	ldr	r1, [pc, #216]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c54:	f7ff f8ca 	bl	8000dec <HAL_GetTick>
 8001c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5a:	e00a      	b.n	8001c72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c5c:	f7ff f8c6 	bl	8000dec <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e053      	b.n	8001d1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c72:	4b2d      	ldr	r3, [pc, #180]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 020c 	and.w	r2, r3, #12
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d1eb      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c84:	4b27      	ldr	r3, [pc, #156]	; (8001d24 <HAL_RCC_ClockConfig+0x1c0>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d210      	bcs.n	8001cb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c92:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <HAL_RCC_ClockConfig+0x1c0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 0207 	bic.w	r2, r3, #7
 8001c9a:	4922      	ldr	r1, [pc, #136]	; (8001d24 <HAL_RCC_ClockConfig+0x1c0>)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca2:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d001      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e032      	b.n	8001d1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d008      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cc0:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	4916      	ldr	r1, [pc, #88]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d009      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cde:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	490e      	ldr	r1, [pc, #56]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cf2:	f000 f821 	bl	8001d38 <HAL_RCC_GetSysClockFreq>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	091b      	lsrs	r3, r3, #4
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	490a      	ldr	r1, [pc, #40]	; (8001d2c <HAL_RCC_ClockConfig+0x1c8>)
 8001d04:	5ccb      	ldrb	r3, [r1, r3]
 8001d06:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0a:	4a09      	ldr	r2, [pc, #36]	; (8001d30 <HAL_RCC_ClockConfig+0x1cc>)
 8001d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_RCC_ClockConfig+0x1d0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff f828 	bl	8000d68 <HAL_InitTick>

  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40022000 	.word	0x40022000
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	080035a4 	.word	0x080035a4
 8001d30:	20000258 	.word	0x20000258
 8001d34:	2000025c 	.word	0x2000025c

08001d38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	2300      	movs	r3, #0
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d52:	4b1e      	ldr	r3, [pc, #120]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x94>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d002      	beq.n	8001d68 <HAL_RCC_GetSysClockFreq+0x30>
 8001d62:	2b08      	cmp	r3, #8
 8001d64:	d003      	beq.n	8001d6e <HAL_RCC_GetSysClockFreq+0x36>
 8001d66:	e027      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d68:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d6a:	613b      	str	r3, [r7, #16]
      break;
 8001d6c:	e027      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	0c9b      	lsrs	r3, r3, #18
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	4a17      	ldr	r2, [pc, #92]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d78:	5cd3      	ldrb	r3, [r2, r3]
 8001d7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d010      	beq.n	8001da8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d86:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x94>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	0c5b      	lsrs	r3, r3, #17
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	4a11      	ldr	r2, [pc, #68]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d92:	5cd3      	ldrb	r3, [r2, r3]
 8001d94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a0d      	ldr	r2, [pc, #52]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d9a:	fb03 f202 	mul.w	r2, r3, r2
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	e004      	b.n	8001db2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a0c      	ldr	r2, [pc, #48]	; (8001ddc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001dac:	fb02 f303 	mul.w	r3, r2, r3
 8001db0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	613b      	str	r3, [r7, #16]
      break;
 8001db6:	e002      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dba:	613b      	str	r3, [r7, #16]
      break;
 8001dbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dbe:	693b      	ldr	r3, [r7, #16]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	371c      	adds	r7, #28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	007a1200 	.word	0x007a1200
 8001dd4:	080035bc 	.word	0x080035bc
 8001dd8:	080035cc 	.word	0x080035cc
 8001ddc:	003d0900 	.word	0x003d0900

08001de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de4:	4b02      	ldr	r3, [pc, #8]	; (8001df0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	20000258 	.word	0x20000258

08001df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001df8:	f7ff fff2 	bl	8001de0 <HAL_RCC_GetHCLKFreq>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	4903      	ldr	r1, [pc, #12]	; (8001e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e0a:	5ccb      	ldrb	r3, [r1, r3]
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40021000 	.word	0x40021000
 8001e18:	080035b4 	.word	0x080035b4

08001e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e20:	f7ff ffde 	bl	8001de0 <HAL_RCC_GetHCLKFreq>
 8001e24:	4602      	mov	r2, r0
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	0adb      	lsrs	r3, r3, #11
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	4903      	ldr	r1, [pc, #12]	; (8001e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e32:	5ccb      	ldrb	r3, [r1, r3]
 8001e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	080035b4 	.word	0x080035b4

08001e44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <RCC_Delay+0x34>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <RCC_Delay+0x38>)
 8001e52:	fba2 2303 	umull	r2, r3, r2, r3
 8001e56:	0a5b      	lsrs	r3, r3, #9
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	fb02 f303 	mul.w	r3, r2, r3
 8001e5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e60:	bf00      	nop
  }
  while (Delay --);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1e5a      	subs	r2, r3, #1
 8001e66:	60fa      	str	r2, [r7, #12]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1f9      	bne.n	8001e60 <RCC_Delay+0x1c>
}
 8001e6c:	bf00      	nop
 8001e6e:	bf00      	nop
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	20000258 	.word	0x20000258
 8001e7c:	10624dd3 	.word	0x10624dd3

08001e80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e042      	b.n	8001f18 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d106      	bne.n	8001eac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7fe fe6a 	bl	8000b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2224      	movs	r2, #36	; 0x24
 8001eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ec2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f9e1 	bl	800228c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ed8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	695a      	ldr	r2, [r3, #20]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ee8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ef8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2220      	movs	r2, #32
 8001f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e024      	b.n	8001f7c <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2224      	movs	r2, #36	; 0x24
 8001f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f48:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7fe fe9e 	bl	8000c8c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	631a      	str	r2, [r3, #48]	; 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	; 0x28
 8001f88:	af02      	add	r7, sp, #8
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	603b      	str	r3, [r7, #0]
 8001f90:	4613      	mov	r3, r2
 8001f92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b20      	cmp	r3, #32
 8001fa2:	d16d      	bne.n	8002080 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d002      	beq.n	8001fb0 <HAL_UART_Transmit+0x2c>
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e066      	b.n	8002082 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2221      	movs	r2, #33	; 0x21
 8001fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fc2:	f7fe ff13 	bl	8000dec <HAL_GetTick>
 8001fc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	88fa      	ldrh	r2, [r7, #6]
 8001fcc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	88fa      	ldrh	r2, [r7, #6]
 8001fd2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fdc:	d108      	bne.n	8001ff0 <HAL_UART_Transmit+0x6c>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d104      	bne.n	8001ff0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	61bb      	str	r3, [r7, #24]
 8001fee:	e003      	b.n	8001ff8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ff8:	e02a      	b.n	8002050 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2200      	movs	r2, #0
 8002002:	2180      	movs	r1, #128	; 0x80
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 f8d2 	bl	80021ae <UART_WaitOnFlagUntilTimeout>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e036      	b.n	8002082 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10b      	bne.n	8002032 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002028:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	3302      	adds	r3, #2
 800202e:	61bb      	str	r3, [r7, #24]
 8002030:	e007      	b.n	8002042 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	781a      	ldrb	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	3301      	adds	r3, #1
 8002040:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002046:	b29b      	uxth	r3, r3
 8002048:	3b01      	subs	r3, #1
 800204a:	b29a      	uxth	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002054:	b29b      	uxth	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1cf      	bne.n	8001ffa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2200      	movs	r2, #0
 8002062:	2140      	movs	r1, #64	; 0x40
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f000 f8a2 	bl	80021ae <UART_WaitOnFlagUntilTimeout>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e006      	b.n	8002082 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	e000      	b.n	8002082 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002080:	2302      	movs	r3, #2
  }
}
 8002082:	4618      	mov	r0, r3
 8002084:	3720      	adds	r7, #32
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b08a      	sub	sp, #40	; 0x28
 800208e:	af02      	add	r7, sp, #8
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	603b      	str	r3, [r7, #0]
 8002096:	4613      	mov	r3, r2
 8002098:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b20      	cmp	r3, #32
 80020a8:	d17c      	bne.n	80021a4 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d002      	beq.n	80020b6 <HAL_UART_Receive+0x2c>
 80020b0:	88fb      	ldrh	r3, [r7, #6]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e075      	b.n	80021a6 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2222      	movs	r2, #34	; 0x22
 80020c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020ce:	f7fe fe8d 	bl	8000dec <HAL_GetTick>
 80020d2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	88fa      	ldrh	r2, [r7, #6]
 80020d8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	88fa      	ldrh	r2, [r7, #6]
 80020de:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020e8:	d108      	bne.n	80020fc <HAL_UART_Receive+0x72>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d104      	bne.n	80020fc <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	61bb      	str	r3, [r7, #24]
 80020fa:	e003      	b.n	8002104 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002100:	2300      	movs	r3, #0
 8002102:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002104:	e043      	b.n	800218e <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	2200      	movs	r2, #0
 800210e:	2120      	movs	r1, #32
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f000 f84c 	bl	80021ae <UART_WaitOnFlagUntilTimeout>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e042      	b.n	80021a6 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10c      	bne.n	8002140 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	b29b      	uxth	r3, r3
 800212e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002132:	b29a      	uxth	r2, r3
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	3302      	adds	r3, #2
 800213c:	61bb      	str	r3, [r7, #24]
 800213e:	e01f      	b.n	8002180 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002148:	d007      	beq.n	800215a <HAL_UART_Receive+0xd0>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10a      	bne.n	8002168 <HAL_UART_Receive+0xde>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d106      	bne.n	8002168 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	b2da      	uxtb	r2, r3
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	701a      	strb	r2, [r3, #0]
 8002166:	e008      	b.n	800217a <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	b2db      	uxtb	r3, r3
 8002170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002174:	b2da      	uxtb	r2, r3
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3301      	adds	r3, #1
 800217e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002184:	b29b      	uxth	r3, r3
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002192:	b29b      	uxth	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1b6      	bne.n	8002106 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2220      	movs	r2, #32
 800219c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80021a0:	2300      	movs	r3, #0
 80021a2:	e000      	b.n	80021a6 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80021a4:	2302      	movs	r3, #2
  }
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3720      	adds	r7, #32
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b090      	sub	sp, #64	; 0x40
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	60f8      	str	r0, [r7, #12]
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	603b      	str	r3, [r7, #0]
 80021ba:	4613      	mov	r3, r2
 80021bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021be:	e050      	b.n	8002262 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c6:	d04c      	beq.n	8002262 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80021c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d007      	beq.n	80021de <UART_WaitOnFlagUntilTimeout+0x30>
 80021ce:	f7fe fe0d 	bl	8000dec <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021da:	429a      	cmp	r2, r3
 80021dc:	d241      	bcs.n	8002262 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	330c      	adds	r3, #12
 80021e4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e8:	e853 3f00 	ldrex	r3, [r3]
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80021f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	330c      	adds	r3, #12
 80021fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021fe:	637a      	str	r2, [r7, #52]	; 0x34
 8002200:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002202:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002204:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002206:	e841 2300 	strex	r3, r2, [r1]
 800220a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800220c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1e5      	bne.n	80021de <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	3314      	adds	r3, #20
 8002218:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	e853 3f00 	ldrex	r3, [r3]
 8002220:	613b      	str	r3, [r7, #16]
   return(result);
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f023 0301 	bic.w	r3, r3, #1
 8002228:	63bb      	str	r3, [r7, #56]	; 0x38
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	3314      	adds	r3, #20
 8002230:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002232:	623a      	str	r2, [r7, #32]
 8002234:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002236:	69f9      	ldr	r1, [r7, #28]
 8002238:	6a3a      	ldr	r2, [r7, #32]
 800223a:	e841 2300 	strex	r3, r2, [r1]
 800223e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1e5      	bne.n	8002212 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2220      	movs	r2, #32
 800224a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2220      	movs	r2, #32
 8002252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e00f      	b.n	8002282 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	4013      	ands	r3, r2
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	429a      	cmp	r2, r3
 8002270:	bf0c      	ite	eq
 8002272:	2301      	moveq	r3, #1
 8002274:	2300      	movne	r3, #0
 8002276:	b2db      	uxtb	r3, r3
 8002278:	461a      	mov	r2, r3
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	429a      	cmp	r2, r3
 800227e:	d09f      	beq.n	80021c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3740      	adds	r7, #64	; 0x40
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80022c6:	f023 030c 	bic.w	r3, r3, #12
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	68b9      	ldr	r1, [r7, #8]
 80022d0:	430b      	orrs	r3, r1
 80022d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	699a      	ldr	r2, [r3, #24]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a2c      	ldr	r2, [pc, #176]	; (80023a0 <UART_SetConfig+0x114>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d103      	bne.n	80022fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80022f4:	f7ff fd92 	bl	8001e1c <HAL_RCC_GetPCLK2Freq>
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	e002      	b.n	8002302 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80022fc:	f7ff fd7a 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 8002300:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	009a      	lsls	r2, r3, #2
 800230c:	441a      	add	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	fbb2 f3f3 	udiv	r3, r2, r3
 8002318:	4a22      	ldr	r2, [pc, #136]	; (80023a4 <UART_SetConfig+0x118>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	095b      	lsrs	r3, r3, #5
 8002320:	0119      	lsls	r1, r3, #4
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	009a      	lsls	r2, r3, #2
 800232c:	441a      	add	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	fbb2 f2f3 	udiv	r2, r2, r3
 8002338:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <UART_SetConfig+0x118>)
 800233a:	fba3 0302 	umull	r0, r3, r3, r2
 800233e:	095b      	lsrs	r3, r3, #5
 8002340:	2064      	movs	r0, #100	; 0x64
 8002342:	fb00 f303 	mul.w	r3, r0, r3
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	3332      	adds	r3, #50	; 0x32
 800234c:	4a15      	ldr	r2, [pc, #84]	; (80023a4 <UART_SetConfig+0x118>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	095b      	lsrs	r3, r3, #5
 8002354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002358:	4419      	add	r1, r3
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	009a      	lsls	r2, r3, #2
 8002364:	441a      	add	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <UART_SetConfig+0x118>)
 8002372:	fba3 0302 	umull	r0, r3, r3, r2
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	2064      	movs	r0, #100	; 0x64
 800237a:	fb00 f303 	mul.w	r3, r0, r3
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	011b      	lsls	r3, r3, #4
 8002382:	3332      	adds	r3, #50	; 0x32
 8002384:	4a07      	ldr	r2, [pc, #28]	; (80023a4 <UART_SetConfig+0x118>)
 8002386:	fba2 2303 	umull	r2, r3, r2, r3
 800238a:	095b      	lsrs	r3, r3, #5
 800238c:	f003 020f 	and.w	r2, r3, #15
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	440a      	add	r2, r1
 8002396:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002398:	bf00      	nop
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40013800 	.word	0x40013800
 80023a4:	51eb851f 	.word	0x51eb851f

080023a8 <__errno>:
 80023a8:	4b01      	ldr	r3, [pc, #4]	; (80023b0 <__errno+0x8>)
 80023aa:	6818      	ldr	r0, [r3, #0]
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	20000264 	.word	0x20000264

080023b4 <__libc_init_array>:
 80023b4:	b570      	push	{r4, r5, r6, lr}
 80023b6:	2600      	movs	r6, #0
 80023b8:	4d0c      	ldr	r5, [pc, #48]	; (80023ec <__libc_init_array+0x38>)
 80023ba:	4c0d      	ldr	r4, [pc, #52]	; (80023f0 <__libc_init_array+0x3c>)
 80023bc:	1b64      	subs	r4, r4, r5
 80023be:	10a4      	asrs	r4, r4, #2
 80023c0:	42a6      	cmp	r6, r4
 80023c2:	d109      	bne.n	80023d8 <__libc_init_array+0x24>
 80023c4:	f001 f82c 	bl	8003420 <_init>
 80023c8:	2600      	movs	r6, #0
 80023ca:	4d0a      	ldr	r5, [pc, #40]	; (80023f4 <__libc_init_array+0x40>)
 80023cc:	4c0a      	ldr	r4, [pc, #40]	; (80023f8 <__libc_init_array+0x44>)
 80023ce:	1b64      	subs	r4, r4, r5
 80023d0:	10a4      	asrs	r4, r4, #2
 80023d2:	42a6      	cmp	r6, r4
 80023d4:	d105      	bne.n	80023e2 <__libc_init_array+0x2e>
 80023d6:	bd70      	pop	{r4, r5, r6, pc}
 80023d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80023dc:	4798      	blx	r3
 80023de:	3601      	adds	r6, #1
 80023e0:	e7ee      	b.n	80023c0 <__libc_init_array+0xc>
 80023e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80023e6:	4798      	blx	r3
 80023e8:	3601      	adds	r6, #1
 80023ea:	e7f2      	b.n	80023d2 <__libc_init_array+0x1e>
 80023ec:	08003668 	.word	0x08003668
 80023f0:	08003668 	.word	0x08003668
 80023f4:	08003668 	.word	0x08003668
 80023f8:	0800366c 	.word	0x0800366c

080023fc <memset>:
 80023fc:	4603      	mov	r3, r0
 80023fe:	4402      	add	r2, r0
 8002400:	4293      	cmp	r3, r2
 8002402:	d100      	bne.n	8002406 <memset+0xa>
 8002404:	4770      	bx	lr
 8002406:	f803 1b01 	strb.w	r1, [r3], #1
 800240a:	e7f9      	b.n	8002400 <memset+0x4>

0800240c <iprintf>:
 800240c:	b40f      	push	{r0, r1, r2, r3}
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <iprintf+0x2c>)
 8002410:	b513      	push	{r0, r1, r4, lr}
 8002412:	681c      	ldr	r4, [r3, #0]
 8002414:	b124      	cbz	r4, 8002420 <iprintf+0x14>
 8002416:	69a3      	ldr	r3, [r4, #24]
 8002418:	b913      	cbnz	r3, 8002420 <iprintf+0x14>
 800241a:	4620      	mov	r0, r4
 800241c:	f000 fa5a 	bl	80028d4 <__sinit>
 8002420:	ab05      	add	r3, sp, #20
 8002422:	4620      	mov	r0, r4
 8002424:	9a04      	ldr	r2, [sp, #16]
 8002426:	68a1      	ldr	r1, [r4, #8]
 8002428:	9301      	str	r3, [sp, #4]
 800242a:	f000 fc5d 	bl	8002ce8 <_vfiprintf_r>
 800242e:	b002      	add	sp, #8
 8002430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002434:	b004      	add	sp, #16
 8002436:	4770      	bx	lr
 8002438:	20000264 	.word	0x20000264

0800243c <_puts_r>:
 800243c:	b570      	push	{r4, r5, r6, lr}
 800243e:	460e      	mov	r6, r1
 8002440:	4605      	mov	r5, r0
 8002442:	b118      	cbz	r0, 800244c <_puts_r+0x10>
 8002444:	6983      	ldr	r3, [r0, #24]
 8002446:	b90b      	cbnz	r3, 800244c <_puts_r+0x10>
 8002448:	f000 fa44 	bl	80028d4 <__sinit>
 800244c:	69ab      	ldr	r3, [r5, #24]
 800244e:	68ac      	ldr	r4, [r5, #8]
 8002450:	b913      	cbnz	r3, 8002458 <_puts_r+0x1c>
 8002452:	4628      	mov	r0, r5
 8002454:	f000 fa3e 	bl	80028d4 <__sinit>
 8002458:	4b2c      	ldr	r3, [pc, #176]	; (800250c <_puts_r+0xd0>)
 800245a:	429c      	cmp	r4, r3
 800245c:	d120      	bne.n	80024a0 <_puts_r+0x64>
 800245e:	686c      	ldr	r4, [r5, #4]
 8002460:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002462:	07db      	lsls	r3, r3, #31
 8002464:	d405      	bmi.n	8002472 <_puts_r+0x36>
 8002466:	89a3      	ldrh	r3, [r4, #12]
 8002468:	0598      	lsls	r0, r3, #22
 800246a:	d402      	bmi.n	8002472 <_puts_r+0x36>
 800246c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800246e:	f000 facf 	bl	8002a10 <__retarget_lock_acquire_recursive>
 8002472:	89a3      	ldrh	r3, [r4, #12]
 8002474:	0719      	lsls	r1, r3, #28
 8002476:	d51d      	bpl.n	80024b4 <_puts_r+0x78>
 8002478:	6923      	ldr	r3, [r4, #16]
 800247a:	b1db      	cbz	r3, 80024b4 <_puts_r+0x78>
 800247c:	3e01      	subs	r6, #1
 800247e:	68a3      	ldr	r3, [r4, #8]
 8002480:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002484:	3b01      	subs	r3, #1
 8002486:	60a3      	str	r3, [r4, #8]
 8002488:	bb39      	cbnz	r1, 80024da <_puts_r+0x9e>
 800248a:	2b00      	cmp	r3, #0
 800248c:	da38      	bge.n	8002500 <_puts_r+0xc4>
 800248e:	4622      	mov	r2, r4
 8002490:	210a      	movs	r1, #10
 8002492:	4628      	mov	r0, r5
 8002494:	f000 f848 	bl	8002528 <__swbuf_r>
 8002498:	3001      	adds	r0, #1
 800249a:	d011      	beq.n	80024c0 <_puts_r+0x84>
 800249c:	250a      	movs	r5, #10
 800249e:	e011      	b.n	80024c4 <_puts_r+0x88>
 80024a0:	4b1b      	ldr	r3, [pc, #108]	; (8002510 <_puts_r+0xd4>)
 80024a2:	429c      	cmp	r4, r3
 80024a4:	d101      	bne.n	80024aa <_puts_r+0x6e>
 80024a6:	68ac      	ldr	r4, [r5, #8]
 80024a8:	e7da      	b.n	8002460 <_puts_r+0x24>
 80024aa:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <_puts_r+0xd8>)
 80024ac:	429c      	cmp	r4, r3
 80024ae:	bf08      	it	eq
 80024b0:	68ec      	ldreq	r4, [r5, #12]
 80024b2:	e7d5      	b.n	8002460 <_puts_r+0x24>
 80024b4:	4621      	mov	r1, r4
 80024b6:	4628      	mov	r0, r5
 80024b8:	f000 f888 	bl	80025cc <__swsetup_r>
 80024bc:	2800      	cmp	r0, #0
 80024be:	d0dd      	beq.n	800247c <_puts_r+0x40>
 80024c0:	f04f 35ff 	mov.w	r5, #4294967295
 80024c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80024c6:	07da      	lsls	r2, r3, #31
 80024c8:	d405      	bmi.n	80024d6 <_puts_r+0x9a>
 80024ca:	89a3      	ldrh	r3, [r4, #12]
 80024cc:	059b      	lsls	r3, r3, #22
 80024ce:	d402      	bmi.n	80024d6 <_puts_r+0x9a>
 80024d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024d2:	f000 fa9e 	bl	8002a12 <__retarget_lock_release_recursive>
 80024d6:	4628      	mov	r0, r5
 80024d8:	bd70      	pop	{r4, r5, r6, pc}
 80024da:	2b00      	cmp	r3, #0
 80024dc:	da04      	bge.n	80024e8 <_puts_r+0xac>
 80024de:	69a2      	ldr	r2, [r4, #24]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	dc06      	bgt.n	80024f2 <_puts_r+0xb6>
 80024e4:	290a      	cmp	r1, #10
 80024e6:	d004      	beq.n	80024f2 <_puts_r+0xb6>
 80024e8:	6823      	ldr	r3, [r4, #0]
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	6022      	str	r2, [r4, #0]
 80024ee:	7019      	strb	r1, [r3, #0]
 80024f0:	e7c5      	b.n	800247e <_puts_r+0x42>
 80024f2:	4622      	mov	r2, r4
 80024f4:	4628      	mov	r0, r5
 80024f6:	f000 f817 	bl	8002528 <__swbuf_r>
 80024fa:	3001      	adds	r0, #1
 80024fc:	d1bf      	bne.n	800247e <_puts_r+0x42>
 80024fe:	e7df      	b.n	80024c0 <_puts_r+0x84>
 8002500:	250a      	movs	r5, #10
 8002502:	6823      	ldr	r3, [r4, #0]
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	6022      	str	r2, [r4, #0]
 8002508:	701d      	strb	r5, [r3, #0]
 800250a:	e7db      	b.n	80024c4 <_puts_r+0x88>
 800250c:	080035f4 	.word	0x080035f4
 8002510:	08003614 	.word	0x08003614
 8002514:	080035d4 	.word	0x080035d4

08002518 <puts>:
 8002518:	4b02      	ldr	r3, [pc, #8]	; (8002524 <puts+0xc>)
 800251a:	4601      	mov	r1, r0
 800251c:	6818      	ldr	r0, [r3, #0]
 800251e:	f7ff bf8d 	b.w	800243c <_puts_r>
 8002522:	bf00      	nop
 8002524:	20000264 	.word	0x20000264

08002528 <__swbuf_r>:
 8002528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800252a:	460e      	mov	r6, r1
 800252c:	4614      	mov	r4, r2
 800252e:	4605      	mov	r5, r0
 8002530:	b118      	cbz	r0, 800253a <__swbuf_r+0x12>
 8002532:	6983      	ldr	r3, [r0, #24]
 8002534:	b90b      	cbnz	r3, 800253a <__swbuf_r+0x12>
 8002536:	f000 f9cd 	bl	80028d4 <__sinit>
 800253a:	4b21      	ldr	r3, [pc, #132]	; (80025c0 <__swbuf_r+0x98>)
 800253c:	429c      	cmp	r4, r3
 800253e:	d12b      	bne.n	8002598 <__swbuf_r+0x70>
 8002540:	686c      	ldr	r4, [r5, #4]
 8002542:	69a3      	ldr	r3, [r4, #24]
 8002544:	60a3      	str	r3, [r4, #8]
 8002546:	89a3      	ldrh	r3, [r4, #12]
 8002548:	071a      	lsls	r2, r3, #28
 800254a:	d52f      	bpl.n	80025ac <__swbuf_r+0x84>
 800254c:	6923      	ldr	r3, [r4, #16]
 800254e:	b36b      	cbz	r3, 80025ac <__swbuf_r+0x84>
 8002550:	6923      	ldr	r3, [r4, #16]
 8002552:	6820      	ldr	r0, [r4, #0]
 8002554:	b2f6      	uxtb	r6, r6
 8002556:	1ac0      	subs	r0, r0, r3
 8002558:	6963      	ldr	r3, [r4, #20]
 800255a:	4637      	mov	r7, r6
 800255c:	4283      	cmp	r3, r0
 800255e:	dc04      	bgt.n	800256a <__swbuf_r+0x42>
 8002560:	4621      	mov	r1, r4
 8002562:	4628      	mov	r0, r5
 8002564:	f000 f922 	bl	80027ac <_fflush_r>
 8002568:	bb30      	cbnz	r0, 80025b8 <__swbuf_r+0x90>
 800256a:	68a3      	ldr	r3, [r4, #8]
 800256c:	3001      	adds	r0, #1
 800256e:	3b01      	subs	r3, #1
 8002570:	60a3      	str	r3, [r4, #8]
 8002572:	6823      	ldr	r3, [r4, #0]
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	6022      	str	r2, [r4, #0]
 8002578:	701e      	strb	r6, [r3, #0]
 800257a:	6963      	ldr	r3, [r4, #20]
 800257c:	4283      	cmp	r3, r0
 800257e:	d004      	beq.n	800258a <__swbuf_r+0x62>
 8002580:	89a3      	ldrh	r3, [r4, #12]
 8002582:	07db      	lsls	r3, r3, #31
 8002584:	d506      	bpl.n	8002594 <__swbuf_r+0x6c>
 8002586:	2e0a      	cmp	r6, #10
 8002588:	d104      	bne.n	8002594 <__swbuf_r+0x6c>
 800258a:	4621      	mov	r1, r4
 800258c:	4628      	mov	r0, r5
 800258e:	f000 f90d 	bl	80027ac <_fflush_r>
 8002592:	b988      	cbnz	r0, 80025b8 <__swbuf_r+0x90>
 8002594:	4638      	mov	r0, r7
 8002596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002598:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <__swbuf_r+0x9c>)
 800259a:	429c      	cmp	r4, r3
 800259c:	d101      	bne.n	80025a2 <__swbuf_r+0x7a>
 800259e:	68ac      	ldr	r4, [r5, #8]
 80025a0:	e7cf      	b.n	8002542 <__swbuf_r+0x1a>
 80025a2:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <__swbuf_r+0xa0>)
 80025a4:	429c      	cmp	r4, r3
 80025a6:	bf08      	it	eq
 80025a8:	68ec      	ldreq	r4, [r5, #12]
 80025aa:	e7ca      	b.n	8002542 <__swbuf_r+0x1a>
 80025ac:	4621      	mov	r1, r4
 80025ae:	4628      	mov	r0, r5
 80025b0:	f000 f80c 	bl	80025cc <__swsetup_r>
 80025b4:	2800      	cmp	r0, #0
 80025b6:	d0cb      	beq.n	8002550 <__swbuf_r+0x28>
 80025b8:	f04f 37ff 	mov.w	r7, #4294967295
 80025bc:	e7ea      	b.n	8002594 <__swbuf_r+0x6c>
 80025be:	bf00      	nop
 80025c0:	080035f4 	.word	0x080035f4
 80025c4:	08003614 	.word	0x08003614
 80025c8:	080035d4 	.word	0x080035d4

080025cc <__swsetup_r>:
 80025cc:	4b32      	ldr	r3, [pc, #200]	; (8002698 <__swsetup_r+0xcc>)
 80025ce:	b570      	push	{r4, r5, r6, lr}
 80025d0:	681d      	ldr	r5, [r3, #0]
 80025d2:	4606      	mov	r6, r0
 80025d4:	460c      	mov	r4, r1
 80025d6:	b125      	cbz	r5, 80025e2 <__swsetup_r+0x16>
 80025d8:	69ab      	ldr	r3, [r5, #24]
 80025da:	b913      	cbnz	r3, 80025e2 <__swsetup_r+0x16>
 80025dc:	4628      	mov	r0, r5
 80025de:	f000 f979 	bl	80028d4 <__sinit>
 80025e2:	4b2e      	ldr	r3, [pc, #184]	; (800269c <__swsetup_r+0xd0>)
 80025e4:	429c      	cmp	r4, r3
 80025e6:	d10f      	bne.n	8002608 <__swsetup_r+0x3c>
 80025e8:	686c      	ldr	r4, [r5, #4]
 80025ea:	89a3      	ldrh	r3, [r4, #12]
 80025ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80025f0:	0719      	lsls	r1, r3, #28
 80025f2:	d42c      	bmi.n	800264e <__swsetup_r+0x82>
 80025f4:	06dd      	lsls	r5, r3, #27
 80025f6:	d411      	bmi.n	800261c <__swsetup_r+0x50>
 80025f8:	2309      	movs	r3, #9
 80025fa:	6033      	str	r3, [r6, #0]
 80025fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002600:	f04f 30ff 	mov.w	r0, #4294967295
 8002604:	81a3      	strh	r3, [r4, #12]
 8002606:	e03e      	b.n	8002686 <__swsetup_r+0xba>
 8002608:	4b25      	ldr	r3, [pc, #148]	; (80026a0 <__swsetup_r+0xd4>)
 800260a:	429c      	cmp	r4, r3
 800260c:	d101      	bne.n	8002612 <__swsetup_r+0x46>
 800260e:	68ac      	ldr	r4, [r5, #8]
 8002610:	e7eb      	b.n	80025ea <__swsetup_r+0x1e>
 8002612:	4b24      	ldr	r3, [pc, #144]	; (80026a4 <__swsetup_r+0xd8>)
 8002614:	429c      	cmp	r4, r3
 8002616:	bf08      	it	eq
 8002618:	68ec      	ldreq	r4, [r5, #12]
 800261a:	e7e6      	b.n	80025ea <__swsetup_r+0x1e>
 800261c:	0758      	lsls	r0, r3, #29
 800261e:	d512      	bpl.n	8002646 <__swsetup_r+0x7a>
 8002620:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002622:	b141      	cbz	r1, 8002636 <__swsetup_r+0x6a>
 8002624:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002628:	4299      	cmp	r1, r3
 800262a:	d002      	beq.n	8002632 <__swsetup_r+0x66>
 800262c:	4630      	mov	r0, r6
 800262e:	f000 fa57 	bl	8002ae0 <_free_r>
 8002632:	2300      	movs	r3, #0
 8002634:	6363      	str	r3, [r4, #52]	; 0x34
 8002636:	89a3      	ldrh	r3, [r4, #12]
 8002638:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800263c:	81a3      	strh	r3, [r4, #12]
 800263e:	2300      	movs	r3, #0
 8002640:	6063      	str	r3, [r4, #4]
 8002642:	6923      	ldr	r3, [r4, #16]
 8002644:	6023      	str	r3, [r4, #0]
 8002646:	89a3      	ldrh	r3, [r4, #12]
 8002648:	f043 0308 	orr.w	r3, r3, #8
 800264c:	81a3      	strh	r3, [r4, #12]
 800264e:	6923      	ldr	r3, [r4, #16]
 8002650:	b94b      	cbnz	r3, 8002666 <__swsetup_r+0x9a>
 8002652:	89a3      	ldrh	r3, [r4, #12]
 8002654:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800265c:	d003      	beq.n	8002666 <__swsetup_r+0x9a>
 800265e:	4621      	mov	r1, r4
 8002660:	4630      	mov	r0, r6
 8002662:	f000 f9fd 	bl	8002a60 <__smakebuf_r>
 8002666:	89a0      	ldrh	r0, [r4, #12]
 8002668:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800266c:	f010 0301 	ands.w	r3, r0, #1
 8002670:	d00a      	beq.n	8002688 <__swsetup_r+0xbc>
 8002672:	2300      	movs	r3, #0
 8002674:	60a3      	str	r3, [r4, #8]
 8002676:	6963      	ldr	r3, [r4, #20]
 8002678:	425b      	negs	r3, r3
 800267a:	61a3      	str	r3, [r4, #24]
 800267c:	6923      	ldr	r3, [r4, #16]
 800267e:	b943      	cbnz	r3, 8002692 <__swsetup_r+0xc6>
 8002680:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002684:	d1ba      	bne.n	80025fc <__swsetup_r+0x30>
 8002686:	bd70      	pop	{r4, r5, r6, pc}
 8002688:	0781      	lsls	r1, r0, #30
 800268a:	bf58      	it	pl
 800268c:	6963      	ldrpl	r3, [r4, #20]
 800268e:	60a3      	str	r3, [r4, #8]
 8002690:	e7f4      	b.n	800267c <__swsetup_r+0xb0>
 8002692:	2000      	movs	r0, #0
 8002694:	e7f7      	b.n	8002686 <__swsetup_r+0xba>
 8002696:	bf00      	nop
 8002698:	20000264 	.word	0x20000264
 800269c:	080035f4 	.word	0x080035f4
 80026a0:	08003614 	.word	0x08003614
 80026a4:	080035d4 	.word	0x080035d4

080026a8 <__sflush_r>:
 80026a8:	898a      	ldrh	r2, [r1, #12]
 80026aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ac:	4605      	mov	r5, r0
 80026ae:	0710      	lsls	r0, r2, #28
 80026b0:	460c      	mov	r4, r1
 80026b2:	d457      	bmi.n	8002764 <__sflush_r+0xbc>
 80026b4:	684b      	ldr	r3, [r1, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	dc04      	bgt.n	80026c4 <__sflush_r+0x1c>
 80026ba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80026bc:	2b00      	cmp	r3, #0
 80026be:	dc01      	bgt.n	80026c4 <__sflush_r+0x1c>
 80026c0:	2000      	movs	r0, #0
 80026c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80026c6:	2e00      	cmp	r6, #0
 80026c8:	d0fa      	beq.n	80026c0 <__sflush_r+0x18>
 80026ca:	2300      	movs	r3, #0
 80026cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80026d0:	682f      	ldr	r7, [r5, #0]
 80026d2:	602b      	str	r3, [r5, #0]
 80026d4:	d032      	beq.n	800273c <__sflush_r+0x94>
 80026d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80026d8:	89a3      	ldrh	r3, [r4, #12]
 80026da:	075a      	lsls	r2, r3, #29
 80026dc:	d505      	bpl.n	80026ea <__sflush_r+0x42>
 80026de:	6863      	ldr	r3, [r4, #4]
 80026e0:	1ac0      	subs	r0, r0, r3
 80026e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80026e4:	b10b      	cbz	r3, 80026ea <__sflush_r+0x42>
 80026e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80026e8:	1ac0      	subs	r0, r0, r3
 80026ea:	2300      	movs	r3, #0
 80026ec:	4602      	mov	r2, r0
 80026ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80026f0:	4628      	mov	r0, r5
 80026f2:	6a21      	ldr	r1, [r4, #32]
 80026f4:	47b0      	blx	r6
 80026f6:	1c43      	adds	r3, r0, #1
 80026f8:	89a3      	ldrh	r3, [r4, #12]
 80026fa:	d106      	bne.n	800270a <__sflush_r+0x62>
 80026fc:	6829      	ldr	r1, [r5, #0]
 80026fe:	291d      	cmp	r1, #29
 8002700:	d82c      	bhi.n	800275c <__sflush_r+0xb4>
 8002702:	4a29      	ldr	r2, [pc, #164]	; (80027a8 <__sflush_r+0x100>)
 8002704:	40ca      	lsrs	r2, r1
 8002706:	07d6      	lsls	r6, r2, #31
 8002708:	d528      	bpl.n	800275c <__sflush_r+0xb4>
 800270a:	2200      	movs	r2, #0
 800270c:	6062      	str	r2, [r4, #4]
 800270e:	6922      	ldr	r2, [r4, #16]
 8002710:	04d9      	lsls	r1, r3, #19
 8002712:	6022      	str	r2, [r4, #0]
 8002714:	d504      	bpl.n	8002720 <__sflush_r+0x78>
 8002716:	1c42      	adds	r2, r0, #1
 8002718:	d101      	bne.n	800271e <__sflush_r+0x76>
 800271a:	682b      	ldr	r3, [r5, #0]
 800271c:	b903      	cbnz	r3, 8002720 <__sflush_r+0x78>
 800271e:	6560      	str	r0, [r4, #84]	; 0x54
 8002720:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002722:	602f      	str	r7, [r5, #0]
 8002724:	2900      	cmp	r1, #0
 8002726:	d0cb      	beq.n	80026c0 <__sflush_r+0x18>
 8002728:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800272c:	4299      	cmp	r1, r3
 800272e:	d002      	beq.n	8002736 <__sflush_r+0x8e>
 8002730:	4628      	mov	r0, r5
 8002732:	f000 f9d5 	bl	8002ae0 <_free_r>
 8002736:	2000      	movs	r0, #0
 8002738:	6360      	str	r0, [r4, #52]	; 0x34
 800273a:	e7c2      	b.n	80026c2 <__sflush_r+0x1a>
 800273c:	6a21      	ldr	r1, [r4, #32]
 800273e:	2301      	movs	r3, #1
 8002740:	4628      	mov	r0, r5
 8002742:	47b0      	blx	r6
 8002744:	1c41      	adds	r1, r0, #1
 8002746:	d1c7      	bne.n	80026d8 <__sflush_r+0x30>
 8002748:	682b      	ldr	r3, [r5, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0c4      	beq.n	80026d8 <__sflush_r+0x30>
 800274e:	2b1d      	cmp	r3, #29
 8002750:	d001      	beq.n	8002756 <__sflush_r+0xae>
 8002752:	2b16      	cmp	r3, #22
 8002754:	d101      	bne.n	800275a <__sflush_r+0xb2>
 8002756:	602f      	str	r7, [r5, #0]
 8002758:	e7b2      	b.n	80026c0 <__sflush_r+0x18>
 800275a:	89a3      	ldrh	r3, [r4, #12]
 800275c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002760:	81a3      	strh	r3, [r4, #12]
 8002762:	e7ae      	b.n	80026c2 <__sflush_r+0x1a>
 8002764:	690f      	ldr	r7, [r1, #16]
 8002766:	2f00      	cmp	r7, #0
 8002768:	d0aa      	beq.n	80026c0 <__sflush_r+0x18>
 800276a:	0793      	lsls	r3, r2, #30
 800276c:	bf18      	it	ne
 800276e:	2300      	movne	r3, #0
 8002770:	680e      	ldr	r6, [r1, #0]
 8002772:	bf08      	it	eq
 8002774:	694b      	ldreq	r3, [r1, #20]
 8002776:	1bf6      	subs	r6, r6, r7
 8002778:	600f      	str	r7, [r1, #0]
 800277a:	608b      	str	r3, [r1, #8]
 800277c:	2e00      	cmp	r6, #0
 800277e:	dd9f      	ble.n	80026c0 <__sflush_r+0x18>
 8002780:	4633      	mov	r3, r6
 8002782:	463a      	mov	r2, r7
 8002784:	4628      	mov	r0, r5
 8002786:	6a21      	ldr	r1, [r4, #32]
 8002788:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800278c:	47e0      	blx	ip
 800278e:	2800      	cmp	r0, #0
 8002790:	dc06      	bgt.n	80027a0 <__sflush_r+0xf8>
 8002792:	89a3      	ldrh	r3, [r4, #12]
 8002794:	f04f 30ff 	mov.w	r0, #4294967295
 8002798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800279c:	81a3      	strh	r3, [r4, #12]
 800279e:	e790      	b.n	80026c2 <__sflush_r+0x1a>
 80027a0:	4407      	add	r7, r0
 80027a2:	1a36      	subs	r6, r6, r0
 80027a4:	e7ea      	b.n	800277c <__sflush_r+0xd4>
 80027a6:	bf00      	nop
 80027a8:	20400001 	.word	0x20400001

080027ac <_fflush_r>:
 80027ac:	b538      	push	{r3, r4, r5, lr}
 80027ae:	690b      	ldr	r3, [r1, #16]
 80027b0:	4605      	mov	r5, r0
 80027b2:	460c      	mov	r4, r1
 80027b4:	b913      	cbnz	r3, 80027bc <_fflush_r+0x10>
 80027b6:	2500      	movs	r5, #0
 80027b8:	4628      	mov	r0, r5
 80027ba:	bd38      	pop	{r3, r4, r5, pc}
 80027bc:	b118      	cbz	r0, 80027c6 <_fflush_r+0x1a>
 80027be:	6983      	ldr	r3, [r0, #24]
 80027c0:	b90b      	cbnz	r3, 80027c6 <_fflush_r+0x1a>
 80027c2:	f000 f887 	bl	80028d4 <__sinit>
 80027c6:	4b14      	ldr	r3, [pc, #80]	; (8002818 <_fflush_r+0x6c>)
 80027c8:	429c      	cmp	r4, r3
 80027ca:	d11b      	bne.n	8002804 <_fflush_r+0x58>
 80027cc:	686c      	ldr	r4, [r5, #4]
 80027ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0ef      	beq.n	80027b6 <_fflush_r+0xa>
 80027d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80027d8:	07d0      	lsls	r0, r2, #31
 80027da:	d404      	bmi.n	80027e6 <_fflush_r+0x3a>
 80027dc:	0599      	lsls	r1, r3, #22
 80027de:	d402      	bmi.n	80027e6 <_fflush_r+0x3a>
 80027e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027e2:	f000 f915 	bl	8002a10 <__retarget_lock_acquire_recursive>
 80027e6:	4628      	mov	r0, r5
 80027e8:	4621      	mov	r1, r4
 80027ea:	f7ff ff5d 	bl	80026a8 <__sflush_r>
 80027ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027f0:	4605      	mov	r5, r0
 80027f2:	07da      	lsls	r2, r3, #31
 80027f4:	d4e0      	bmi.n	80027b8 <_fflush_r+0xc>
 80027f6:	89a3      	ldrh	r3, [r4, #12]
 80027f8:	059b      	lsls	r3, r3, #22
 80027fa:	d4dd      	bmi.n	80027b8 <_fflush_r+0xc>
 80027fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027fe:	f000 f908 	bl	8002a12 <__retarget_lock_release_recursive>
 8002802:	e7d9      	b.n	80027b8 <_fflush_r+0xc>
 8002804:	4b05      	ldr	r3, [pc, #20]	; (800281c <_fflush_r+0x70>)
 8002806:	429c      	cmp	r4, r3
 8002808:	d101      	bne.n	800280e <_fflush_r+0x62>
 800280a:	68ac      	ldr	r4, [r5, #8]
 800280c:	e7df      	b.n	80027ce <_fflush_r+0x22>
 800280e:	4b04      	ldr	r3, [pc, #16]	; (8002820 <_fflush_r+0x74>)
 8002810:	429c      	cmp	r4, r3
 8002812:	bf08      	it	eq
 8002814:	68ec      	ldreq	r4, [r5, #12]
 8002816:	e7da      	b.n	80027ce <_fflush_r+0x22>
 8002818:	080035f4 	.word	0x080035f4
 800281c:	08003614 	.word	0x08003614
 8002820:	080035d4 	.word	0x080035d4

08002824 <std>:
 8002824:	2300      	movs	r3, #0
 8002826:	b510      	push	{r4, lr}
 8002828:	4604      	mov	r4, r0
 800282a:	e9c0 3300 	strd	r3, r3, [r0]
 800282e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002832:	6083      	str	r3, [r0, #8]
 8002834:	8181      	strh	r1, [r0, #12]
 8002836:	6643      	str	r3, [r0, #100]	; 0x64
 8002838:	81c2      	strh	r2, [r0, #14]
 800283a:	6183      	str	r3, [r0, #24]
 800283c:	4619      	mov	r1, r3
 800283e:	2208      	movs	r2, #8
 8002840:	305c      	adds	r0, #92	; 0x5c
 8002842:	f7ff fddb 	bl	80023fc <memset>
 8002846:	4b05      	ldr	r3, [pc, #20]	; (800285c <std+0x38>)
 8002848:	6224      	str	r4, [r4, #32]
 800284a:	6263      	str	r3, [r4, #36]	; 0x24
 800284c:	4b04      	ldr	r3, [pc, #16]	; (8002860 <std+0x3c>)
 800284e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002850:	4b04      	ldr	r3, [pc, #16]	; (8002864 <std+0x40>)
 8002852:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002854:	4b04      	ldr	r3, [pc, #16]	; (8002868 <std+0x44>)
 8002856:	6323      	str	r3, [r4, #48]	; 0x30
 8002858:	bd10      	pop	{r4, pc}
 800285a:	bf00      	nop
 800285c:	08003295 	.word	0x08003295
 8002860:	080032b7 	.word	0x080032b7
 8002864:	080032ef 	.word	0x080032ef
 8002868:	08003313 	.word	0x08003313

0800286c <_cleanup_r>:
 800286c:	4901      	ldr	r1, [pc, #4]	; (8002874 <_cleanup_r+0x8>)
 800286e:	f000 b8af 	b.w	80029d0 <_fwalk_reent>
 8002872:	bf00      	nop
 8002874:	080027ad 	.word	0x080027ad

08002878 <__sfmoreglue>:
 8002878:	2268      	movs	r2, #104	; 0x68
 800287a:	b570      	push	{r4, r5, r6, lr}
 800287c:	1e4d      	subs	r5, r1, #1
 800287e:	4355      	muls	r5, r2
 8002880:	460e      	mov	r6, r1
 8002882:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002886:	f000 f993 	bl	8002bb0 <_malloc_r>
 800288a:	4604      	mov	r4, r0
 800288c:	b140      	cbz	r0, 80028a0 <__sfmoreglue+0x28>
 800288e:	2100      	movs	r1, #0
 8002890:	e9c0 1600 	strd	r1, r6, [r0]
 8002894:	300c      	adds	r0, #12
 8002896:	60a0      	str	r0, [r4, #8]
 8002898:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800289c:	f7ff fdae 	bl	80023fc <memset>
 80028a0:	4620      	mov	r0, r4
 80028a2:	bd70      	pop	{r4, r5, r6, pc}

080028a4 <__sfp_lock_acquire>:
 80028a4:	4801      	ldr	r0, [pc, #4]	; (80028ac <__sfp_lock_acquire+0x8>)
 80028a6:	f000 b8b3 	b.w	8002a10 <__retarget_lock_acquire_recursive>
 80028aa:	bf00      	nop
 80028ac:	2000044d 	.word	0x2000044d

080028b0 <__sfp_lock_release>:
 80028b0:	4801      	ldr	r0, [pc, #4]	; (80028b8 <__sfp_lock_release+0x8>)
 80028b2:	f000 b8ae 	b.w	8002a12 <__retarget_lock_release_recursive>
 80028b6:	bf00      	nop
 80028b8:	2000044d 	.word	0x2000044d

080028bc <__sinit_lock_acquire>:
 80028bc:	4801      	ldr	r0, [pc, #4]	; (80028c4 <__sinit_lock_acquire+0x8>)
 80028be:	f000 b8a7 	b.w	8002a10 <__retarget_lock_acquire_recursive>
 80028c2:	bf00      	nop
 80028c4:	2000044e 	.word	0x2000044e

080028c8 <__sinit_lock_release>:
 80028c8:	4801      	ldr	r0, [pc, #4]	; (80028d0 <__sinit_lock_release+0x8>)
 80028ca:	f000 b8a2 	b.w	8002a12 <__retarget_lock_release_recursive>
 80028ce:	bf00      	nop
 80028d0:	2000044e 	.word	0x2000044e

080028d4 <__sinit>:
 80028d4:	b510      	push	{r4, lr}
 80028d6:	4604      	mov	r4, r0
 80028d8:	f7ff fff0 	bl	80028bc <__sinit_lock_acquire>
 80028dc:	69a3      	ldr	r3, [r4, #24]
 80028de:	b11b      	cbz	r3, 80028e8 <__sinit+0x14>
 80028e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028e4:	f7ff bff0 	b.w	80028c8 <__sinit_lock_release>
 80028e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80028ec:	6523      	str	r3, [r4, #80]	; 0x50
 80028ee:	4b13      	ldr	r3, [pc, #76]	; (800293c <__sinit+0x68>)
 80028f0:	4a13      	ldr	r2, [pc, #76]	; (8002940 <__sinit+0x6c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80028f6:	42a3      	cmp	r3, r4
 80028f8:	bf08      	it	eq
 80028fa:	2301      	moveq	r3, #1
 80028fc:	4620      	mov	r0, r4
 80028fe:	bf08      	it	eq
 8002900:	61a3      	streq	r3, [r4, #24]
 8002902:	f000 f81f 	bl	8002944 <__sfp>
 8002906:	6060      	str	r0, [r4, #4]
 8002908:	4620      	mov	r0, r4
 800290a:	f000 f81b 	bl	8002944 <__sfp>
 800290e:	60a0      	str	r0, [r4, #8]
 8002910:	4620      	mov	r0, r4
 8002912:	f000 f817 	bl	8002944 <__sfp>
 8002916:	2200      	movs	r2, #0
 8002918:	2104      	movs	r1, #4
 800291a:	60e0      	str	r0, [r4, #12]
 800291c:	6860      	ldr	r0, [r4, #4]
 800291e:	f7ff ff81 	bl	8002824 <std>
 8002922:	2201      	movs	r2, #1
 8002924:	2109      	movs	r1, #9
 8002926:	68a0      	ldr	r0, [r4, #8]
 8002928:	f7ff ff7c 	bl	8002824 <std>
 800292c:	2202      	movs	r2, #2
 800292e:	2112      	movs	r1, #18
 8002930:	68e0      	ldr	r0, [r4, #12]
 8002932:	f7ff ff77 	bl	8002824 <std>
 8002936:	2301      	movs	r3, #1
 8002938:	61a3      	str	r3, [r4, #24]
 800293a:	e7d1      	b.n	80028e0 <__sinit+0xc>
 800293c:	080035d0 	.word	0x080035d0
 8002940:	0800286d 	.word	0x0800286d

08002944 <__sfp>:
 8002944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002946:	4607      	mov	r7, r0
 8002948:	f7ff ffac 	bl	80028a4 <__sfp_lock_acquire>
 800294c:	4b1e      	ldr	r3, [pc, #120]	; (80029c8 <__sfp+0x84>)
 800294e:	681e      	ldr	r6, [r3, #0]
 8002950:	69b3      	ldr	r3, [r6, #24]
 8002952:	b913      	cbnz	r3, 800295a <__sfp+0x16>
 8002954:	4630      	mov	r0, r6
 8002956:	f7ff ffbd 	bl	80028d4 <__sinit>
 800295a:	3648      	adds	r6, #72	; 0x48
 800295c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002960:	3b01      	subs	r3, #1
 8002962:	d503      	bpl.n	800296c <__sfp+0x28>
 8002964:	6833      	ldr	r3, [r6, #0]
 8002966:	b30b      	cbz	r3, 80029ac <__sfp+0x68>
 8002968:	6836      	ldr	r6, [r6, #0]
 800296a:	e7f7      	b.n	800295c <__sfp+0x18>
 800296c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002970:	b9d5      	cbnz	r5, 80029a8 <__sfp+0x64>
 8002972:	4b16      	ldr	r3, [pc, #88]	; (80029cc <__sfp+0x88>)
 8002974:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002978:	60e3      	str	r3, [r4, #12]
 800297a:	6665      	str	r5, [r4, #100]	; 0x64
 800297c:	f000 f847 	bl	8002a0e <__retarget_lock_init_recursive>
 8002980:	f7ff ff96 	bl	80028b0 <__sfp_lock_release>
 8002984:	2208      	movs	r2, #8
 8002986:	4629      	mov	r1, r5
 8002988:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800298c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002990:	6025      	str	r5, [r4, #0]
 8002992:	61a5      	str	r5, [r4, #24]
 8002994:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002998:	f7ff fd30 	bl	80023fc <memset>
 800299c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80029a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80029a4:	4620      	mov	r0, r4
 80029a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029a8:	3468      	adds	r4, #104	; 0x68
 80029aa:	e7d9      	b.n	8002960 <__sfp+0x1c>
 80029ac:	2104      	movs	r1, #4
 80029ae:	4638      	mov	r0, r7
 80029b0:	f7ff ff62 	bl	8002878 <__sfmoreglue>
 80029b4:	4604      	mov	r4, r0
 80029b6:	6030      	str	r0, [r6, #0]
 80029b8:	2800      	cmp	r0, #0
 80029ba:	d1d5      	bne.n	8002968 <__sfp+0x24>
 80029bc:	f7ff ff78 	bl	80028b0 <__sfp_lock_release>
 80029c0:	230c      	movs	r3, #12
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	e7ee      	b.n	80029a4 <__sfp+0x60>
 80029c6:	bf00      	nop
 80029c8:	080035d0 	.word	0x080035d0
 80029cc:	ffff0001 	.word	0xffff0001

080029d0 <_fwalk_reent>:
 80029d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029d4:	4606      	mov	r6, r0
 80029d6:	4688      	mov	r8, r1
 80029d8:	2700      	movs	r7, #0
 80029da:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80029de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80029e2:	f1b9 0901 	subs.w	r9, r9, #1
 80029e6:	d505      	bpl.n	80029f4 <_fwalk_reent+0x24>
 80029e8:	6824      	ldr	r4, [r4, #0]
 80029ea:	2c00      	cmp	r4, #0
 80029ec:	d1f7      	bne.n	80029de <_fwalk_reent+0xe>
 80029ee:	4638      	mov	r0, r7
 80029f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029f4:	89ab      	ldrh	r3, [r5, #12]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d907      	bls.n	8002a0a <_fwalk_reent+0x3a>
 80029fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80029fe:	3301      	adds	r3, #1
 8002a00:	d003      	beq.n	8002a0a <_fwalk_reent+0x3a>
 8002a02:	4629      	mov	r1, r5
 8002a04:	4630      	mov	r0, r6
 8002a06:	47c0      	blx	r8
 8002a08:	4307      	orrs	r7, r0
 8002a0a:	3568      	adds	r5, #104	; 0x68
 8002a0c:	e7e9      	b.n	80029e2 <_fwalk_reent+0x12>

08002a0e <__retarget_lock_init_recursive>:
 8002a0e:	4770      	bx	lr

08002a10 <__retarget_lock_acquire_recursive>:
 8002a10:	4770      	bx	lr

08002a12 <__retarget_lock_release_recursive>:
 8002a12:	4770      	bx	lr

08002a14 <__swhatbuf_r>:
 8002a14:	b570      	push	{r4, r5, r6, lr}
 8002a16:	460e      	mov	r6, r1
 8002a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a1c:	4614      	mov	r4, r2
 8002a1e:	2900      	cmp	r1, #0
 8002a20:	461d      	mov	r5, r3
 8002a22:	b096      	sub	sp, #88	; 0x58
 8002a24:	da08      	bge.n	8002a38 <__swhatbuf_r+0x24>
 8002a26:	2200      	movs	r2, #0
 8002a28:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002a2c:	602a      	str	r2, [r5, #0]
 8002a2e:	061a      	lsls	r2, r3, #24
 8002a30:	d410      	bmi.n	8002a54 <__swhatbuf_r+0x40>
 8002a32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a36:	e00e      	b.n	8002a56 <__swhatbuf_r+0x42>
 8002a38:	466a      	mov	r2, sp
 8002a3a:	f000 fc91 	bl	8003360 <_fstat_r>
 8002a3e:	2800      	cmp	r0, #0
 8002a40:	dbf1      	blt.n	8002a26 <__swhatbuf_r+0x12>
 8002a42:	9a01      	ldr	r2, [sp, #4]
 8002a44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002a48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002a4c:	425a      	negs	r2, r3
 8002a4e:	415a      	adcs	r2, r3
 8002a50:	602a      	str	r2, [r5, #0]
 8002a52:	e7ee      	b.n	8002a32 <__swhatbuf_r+0x1e>
 8002a54:	2340      	movs	r3, #64	; 0x40
 8002a56:	2000      	movs	r0, #0
 8002a58:	6023      	str	r3, [r4, #0]
 8002a5a:	b016      	add	sp, #88	; 0x58
 8002a5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002a60 <__smakebuf_r>:
 8002a60:	898b      	ldrh	r3, [r1, #12]
 8002a62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002a64:	079d      	lsls	r5, r3, #30
 8002a66:	4606      	mov	r6, r0
 8002a68:	460c      	mov	r4, r1
 8002a6a:	d507      	bpl.n	8002a7c <__smakebuf_r+0x1c>
 8002a6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002a70:	6023      	str	r3, [r4, #0]
 8002a72:	6123      	str	r3, [r4, #16]
 8002a74:	2301      	movs	r3, #1
 8002a76:	6163      	str	r3, [r4, #20]
 8002a78:	b002      	add	sp, #8
 8002a7a:	bd70      	pop	{r4, r5, r6, pc}
 8002a7c:	466a      	mov	r2, sp
 8002a7e:	ab01      	add	r3, sp, #4
 8002a80:	f7ff ffc8 	bl	8002a14 <__swhatbuf_r>
 8002a84:	9900      	ldr	r1, [sp, #0]
 8002a86:	4605      	mov	r5, r0
 8002a88:	4630      	mov	r0, r6
 8002a8a:	f000 f891 	bl	8002bb0 <_malloc_r>
 8002a8e:	b948      	cbnz	r0, 8002aa4 <__smakebuf_r+0x44>
 8002a90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a94:	059a      	lsls	r2, r3, #22
 8002a96:	d4ef      	bmi.n	8002a78 <__smakebuf_r+0x18>
 8002a98:	f023 0303 	bic.w	r3, r3, #3
 8002a9c:	f043 0302 	orr.w	r3, r3, #2
 8002aa0:	81a3      	strh	r3, [r4, #12]
 8002aa2:	e7e3      	b.n	8002a6c <__smakebuf_r+0xc>
 8002aa4:	4b0d      	ldr	r3, [pc, #52]	; (8002adc <__smakebuf_r+0x7c>)
 8002aa6:	62b3      	str	r3, [r6, #40]	; 0x28
 8002aa8:	89a3      	ldrh	r3, [r4, #12]
 8002aaa:	6020      	str	r0, [r4, #0]
 8002aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ab0:	81a3      	strh	r3, [r4, #12]
 8002ab2:	9b00      	ldr	r3, [sp, #0]
 8002ab4:	6120      	str	r0, [r4, #16]
 8002ab6:	6163      	str	r3, [r4, #20]
 8002ab8:	9b01      	ldr	r3, [sp, #4]
 8002aba:	b15b      	cbz	r3, 8002ad4 <__smakebuf_r+0x74>
 8002abc:	4630      	mov	r0, r6
 8002abe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ac2:	f000 fc5f 	bl	8003384 <_isatty_r>
 8002ac6:	b128      	cbz	r0, 8002ad4 <__smakebuf_r+0x74>
 8002ac8:	89a3      	ldrh	r3, [r4, #12]
 8002aca:	f023 0303 	bic.w	r3, r3, #3
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	81a3      	strh	r3, [r4, #12]
 8002ad4:	89a0      	ldrh	r0, [r4, #12]
 8002ad6:	4305      	orrs	r5, r0
 8002ad8:	81a5      	strh	r5, [r4, #12]
 8002ada:	e7cd      	b.n	8002a78 <__smakebuf_r+0x18>
 8002adc:	0800286d 	.word	0x0800286d

08002ae0 <_free_r>:
 8002ae0:	b538      	push	{r3, r4, r5, lr}
 8002ae2:	4605      	mov	r5, r0
 8002ae4:	2900      	cmp	r1, #0
 8002ae6:	d040      	beq.n	8002b6a <_free_r+0x8a>
 8002ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002aec:	1f0c      	subs	r4, r1, #4
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	bfb8      	it	lt
 8002af2:	18e4      	addlt	r4, r4, r3
 8002af4:	f000 fc76 	bl	80033e4 <__malloc_lock>
 8002af8:	4a1c      	ldr	r2, [pc, #112]	; (8002b6c <_free_r+0x8c>)
 8002afa:	6813      	ldr	r3, [r2, #0]
 8002afc:	b933      	cbnz	r3, 8002b0c <_free_r+0x2c>
 8002afe:	6063      	str	r3, [r4, #4]
 8002b00:	6014      	str	r4, [r2, #0]
 8002b02:	4628      	mov	r0, r5
 8002b04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b08:	f000 bc72 	b.w	80033f0 <__malloc_unlock>
 8002b0c:	42a3      	cmp	r3, r4
 8002b0e:	d908      	bls.n	8002b22 <_free_r+0x42>
 8002b10:	6820      	ldr	r0, [r4, #0]
 8002b12:	1821      	adds	r1, r4, r0
 8002b14:	428b      	cmp	r3, r1
 8002b16:	bf01      	itttt	eq
 8002b18:	6819      	ldreq	r1, [r3, #0]
 8002b1a:	685b      	ldreq	r3, [r3, #4]
 8002b1c:	1809      	addeq	r1, r1, r0
 8002b1e:	6021      	streq	r1, [r4, #0]
 8002b20:	e7ed      	b.n	8002afe <_free_r+0x1e>
 8002b22:	461a      	mov	r2, r3
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	b10b      	cbz	r3, 8002b2c <_free_r+0x4c>
 8002b28:	42a3      	cmp	r3, r4
 8002b2a:	d9fa      	bls.n	8002b22 <_free_r+0x42>
 8002b2c:	6811      	ldr	r1, [r2, #0]
 8002b2e:	1850      	adds	r0, r2, r1
 8002b30:	42a0      	cmp	r0, r4
 8002b32:	d10b      	bne.n	8002b4c <_free_r+0x6c>
 8002b34:	6820      	ldr	r0, [r4, #0]
 8002b36:	4401      	add	r1, r0
 8002b38:	1850      	adds	r0, r2, r1
 8002b3a:	4283      	cmp	r3, r0
 8002b3c:	6011      	str	r1, [r2, #0]
 8002b3e:	d1e0      	bne.n	8002b02 <_free_r+0x22>
 8002b40:	6818      	ldr	r0, [r3, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	4401      	add	r1, r0
 8002b46:	6011      	str	r1, [r2, #0]
 8002b48:	6053      	str	r3, [r2, #4]
 8002b4a:	e7da      	b.n	8002b02 <_free_r+0x22>
 8002b4c:	d902      	bls.n	8002b54 <_free_r+0x74>
 8002b4e:	230c      	movs	r3, #12
 8002b50:	602b      	str	r3, [r5, #0]
 8002b52:	e7d6      	b.n	8002b02 <_free_r+0x22>
 8002b54:	6820      	ldr	r0, [r4, #0]
 8002b56:	1821      	adds	r1, r4, r0
 8002b58:	428b      	cmp	r3, r1
 8002b5a:	bf01      	itttt	eq
 8002b5c:	6819      	ldreq	r1, [r3, #0]
 8002b5e:	685b      	ldreq	r3, [r3, #4]
 8002b60:	1809      	addeq	r1, r1, r0
 8002b62:	6021      	streq	r1, [r4, #0]
 8002b64:	6063      	str	r3, [r4, #4]
 8002b66:	6054      	str	r4, [r2, #4]
 8002b68:	e7cb      	b.n	8002b02 <_free_r+0x22>
 8002b6a:	bd38      	pop	{r3, r4, r5, pc}
 8002b6c:	20000450 	.word	0x20000450

08002b70 <sbrk_aligned>:
 8002b70:	b570      	push	{r4, r5, r6, lr}
 8002b72:	4e0e      	ldr	r6, [pc, #56]	; (8002bac <sbrk_aligned+0x3c>)
 8002b74:	460c      	mov	r4, r1
 8002b76:	6831      	ldr	r1, [r6, #0]
 8002b78:	4605      	mov	r5, r0
 8002b7a:	b911      	cbnz	r1, 8002b82 <sbrk_aligned+0x12>
 8002b7c:	f000 fb7a 	bl	8003274 <_sbrk_r>
 8002b80:	6030      	str	r0, [r6, #0]
 8002b82:	4621      	mov	r1, r4
 8002b84:	4628      	mov	r0, r5
 8002b86:	f000 fb75 	bl	8003274 <_sbrk_r>
 8002b8a:	1c43      	adds	r3, r0, #1
 8002b8c:	d00a      	beq.n	8002ba4 <sbrk_aligned+0x34>
 8002b8e:	1cc4      	adds	r4, r0, #3
 8002b90:	f024 0403 	bic.w	r4, r4, #3
 8002b94:	42a0      	cmp	r0, r4
 8002b96:	d007      	beq.n	8002ba8 <sbrk_aligned+0x38>
 8002b98:	1a21      	subs	r1, r4, r0
 8002b9a:	4628      	mov	r0, r5
 8002b9c:	f000 fb6a 	bl	8003274 <_sbrk_r>
 8002ba0:	3001      	adds	r0, #1
 8002ba2:	d101      	bne.n	8002ba8 <sbrk_aligned+0x38>
 8002ba4:	f04f 34ff 	mov.w	r4, #4294967295
 8002ba8:	4620      	mov	r0, r4
 8002baa:	bd70      	pop	{r4, r5, r6, pc}
 8002bac:	20000454 	.word	0x20000454

08002bb0 <_malloc_r>:
 8002bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bb4:	1ccd      	adds	r5, r1, #3
 8002bb6:	f025 0503 	bic.w	r5, r5, #3
 8002bba:	3508      	adds	r5, #8
 8002bbc:	2d0c      	cmp	r5, #12
 8002bbe:	bf38      	it	cc
 8002bc0:	250c      	movcc	r5, #12
 8002bc2:	2d00      	cmp	r5, #0
 8002bc4:	4607      	mov	r7, r0
 8002bc6:	db01      	blt.n	8002bcc <_malloc_r+0x1c>
 8002bc8:	42a9      	cmp	r1, r5
 8002bca:	d905      	bls.n	8002bd8 <_malloc_r+0x28>
 8002bcc:	230c      	movs	r3, #12
 8002bce:	2600      	movs	r6, #0
 8002bd0:	603b      	str	r3, [r7, #0]
 8002bd2:	4630      	mov	r0, r6
 8002bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bd8:	4e2e      	ldr	r6, [pc, #184]	; (8002c94 <_malloc_r+0xe4>)
 8002bda:	f000 fc03 	bl	80033e4 <__malloc_lock>
 8002bde:	6833      	ldr	r3, [r6, #0]
 8002be0:	461c      	mov	r4, r3
 8002be2:	bb34      	cbnz	r4, 8002c32 <_malloc_r+0x82>
 8002be4:	4629      	mov	r1, r5
 8002be6:	4638      	mov	r0, r7
 8002be8:	f7ff ffc2 	bl	8002b70 <sbrk_aligned>
 8002bec:	1c43      	adds	r3, r0, #1
 8002bee:	4604      	mov	r4, r0
 8002bf0:	d14d      	bne.n	8002c8e <_malloc_r+0xde>
 8002bf2:	6834      	ldr	r4, [r6, #0]
 8002bf4:	4626      	mov	r6, r4
 8002bf6:	2e00      	cmp	r6, #0
 8002bf8:	d140      	bne.n	8002c7c <_malloc_r+0xcc>
 8002bfa:	6823      	ldr	r3, [r4, #0]
 8002bfc:	4631      	mov	r1, r6
 8002bfe:	4638      	mov	r0, r7
 8002c00:	eb04 0803 	add.w	r8, r4, r3
 8002c04:	f000 fb36 	bl	8003274 <_sbrk_r>
 8002c08:	4580      	cmp	r8, r0
 8002c0a:	d13a      	bne.n	8002c82 <_malloc_r+0xd2>
 8002c0c:	6821      	ldr	r1, [r4, #0]
 8002c0e:	3503      	adds	r5, #3
 8002c10:	1a6d      	subs	r5, r5, r1
 8002c12:	f025 0503 	bic.w	r5, r5, #3
 8002c16:	3508      	adds	r5, #8
 8002c18:	2d0c      	cmp	r5, #12
 8002c1a:	bf38      	it	cc
 8002c1c:	250c      	movcc	r5, #12
 8002c1e:	4638      	mov	r0, r7
 8002c20:	4629      	mov	r1, r5
 8002c22:	f7ff ffa5 	bl	8002b70 <sbrk_aligned>
 8002c26:	3001      	adds	r0, #1
 8002c28:	d02b      	beq.n	8002c82 <_malloc_r+0xd2>
 8002c2a:	6823      	ldr	r3, [r4, #0]
 8002c2c:	442b      	add	r3, r5
 8002c2e:	6023      	str	r3, [r4, #0]
 8002c30:	e00e      	b.n	8002c50 <_malloc_r+0xa0>
 8002c32:	6822      	ldr	r2, [r4, #0]
 8002c34:	1b52      	subs	r2, r2, r5
 8002c36:	d41e      	bmi.n	8002c76 <_malloc_r+0xc6>
 8002c38:	2a0b      	cmp	r2, #11
 8002c3a:	d916      	bls.n	8002c6a <_malloc_r+0xba>
 8002c3c:	1961      	adds	r1, r4, r5
 8002c3e:	42a3      	cmp	r3, r4
 8002c40:	6025      	str	r5, [r4, #0]
 8002c42:	bf18      	it	ne
 8002c44:	6059      	strne	r1, [r3, #4]
 8002c46:	6863      	ldr	r3, [r4, #4]
 8002c48:	bf08      	it	eq
 8002c4a:	6031      	streq	r1, [r6, #0]
 8002c4c:	5162      	str	r2, [r4, r5]
 8002c4e:	604b      	str	r3, [r1, #4]
 8002c50:	4638      	mov	r0, r7
 8002c52:	f104 060b 	add.w	r6, r4, #11
 8002c56:	f000 fbcb 	bl	80033f0 <__malloc_unlock>
 8002c5a:	f026 0607 	bic.w	r6, r6, #7
 8002c5e:	1d23      	adds	r3, r4, #4
 8002c60:	1af2      	subs	r2, r6, r3
 8002c62:	d0b6      	beq.n	8002bd2 <_malloc_r+0x22>
 8002c64:	1b9b      	subs	r3, r3, r6
 8002c66:	50a3      	str	r3, [r4, r2]
 8002c68:	e7b3      	b.n	8002bd2 <_malloc_r+0x22>
 8002c6a:	6862      	ldr	r2, [r4, #4]
 8002c6c:	42a3      	cmp	r3, r4
 8002c6e:	bf0c      	ite	eq
 8002c70:	6032      	streq	r2, [r6, #0]
 8002c72:	605a      	strne	r2, [r3, #4]
 8002c74:	e7ec      	b.n	8002c50 <_malloc_r+0xa0>
 8002c76:	4623      	mov	r3, r4
 8002c78:	6864      	ldr	r4, [r4, #4]
 8002c7a:	e7b2      	b.n	8002be2 <_malloc_r+0x32>
 8002c7c:	4634      	mov	r4, r6
 8002c7e:	6876      	ldr	r6, [r6, #4]
 8002c80:	e7b9      	b.n	8002bf6 <_malloc_r+0x46>
 8002c82:	230c      	movs	r3, #12
 8002c84:	4638      	mov	r0, r7
 8002c86:	603b      	str	r3, [r7, #0]
 8002c88:	f000 fbb2 	bl	80033f0 <__malloc_unlock>
 8002c8c:	e7a1      	b.n	8002bd2 <_malloc_r+0x22>
 8002c8e:	6025      	str	r5, [r4, #0]
 8002c90:	e7de      	b.n	8002c50 <_malloc_r+0xa0>
 8002c92:	bf00      	nop
 8002c94:	20000450 	.word	0x20000450

08002c98 <__sfputc_r>:
 8002c98:	6893      	ldr	r3, [r2, #8]
 8002c9a:	b410      	push	{r4}
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	6093      	str	r3, [r2, #8]
 8002ca2:	da07      	bge.n	8002cb4 <__sfputc_r+0x1c>
 8002ca4:	6994      	ldr	r4, [r2, #24]
 8002ca6:	42a3      	cmp	r3, r4
 8002ca8:	db01      	blt.n	8002cae <__sfputc_r+0x16>
 8002caa:	290a      	cmp	r1, #10
 8002cac:	d102      	bne.n	8002cb4 <__sfputc_r+0x1c>
 8002cae:	bc10      	pop	{r4}
 8002cb0:	f7ff bc3a 	b.w	8002528 <__swbuf_r>
 8002cb4:	6813      	ldr	r3, [r2, #0]
 8002cb6:	1c58      	adds	r0, r3, #1
 8002cb8:	6010      	str	r0, [r2, #0]
 8002cba:	7019      	strb	r1, [r3, #0]
 8002cbc:	4608      	mov	r0, r1
 8002cbe:	bc10      	pop	{r4}
 8002cc0:	4770      	bx	lr

08002cc2 <__sfputs_r>:
 8002cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc4:	4606      	mov	r6, r0
 8002cc6:	460f      	mov	r7, r1
 8002cc8:	4614      	mov	r4, r2
 8002cca:	18d5      	adds	r5, r2, r3
 8002ccc:	42ac      	cmp	r4, r5
 8002cce:	d101      	bne.n	8002cd4 <__sfputs_r+0x12>
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	e007      	b.n	8002ce4 <__sfputs_r+0x22>
 8002cd4:	463a      	mov	r2, r7
 8002cd6:	4630      	mov	r0, r6
 8002cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cdc:	f7ff ffdc 	bl	8002c98 <__sfputc_r>
 8002ce0:	1c43      	adds	r3, r0, #1
 8002ce2:	d1f3      	bne.n	8002ccc <__sfputs_r+0xa>
 8002ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002ce8 <_vfiprintf_r>:
 8002ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cec:	460d      	mov	r5, r1
 8002cee:	4614      	mov	r4, r2
 8002cf0:	4698      	mov	r8, r3
 8002cf2:	4606      	mov	r6, r0
 8002cf4:	b09d      	sub	sp, #116	; 0x74
 8002cf6:	b118      	cbz	r0, 8002d00 <_vfiprintf_r+0x18>
 8002cf8:	6983      	ldr	r3, [r0, #24]
 8002cfa:	b90b      	cbnz	r3, 8002d00 <_vfiprintf_r+0x18>
 8002cfc:	f7ff fdea 	bl	80028d4 <__sinit>
 8002d00:	4b89      	ldr	r3, [pc, #548]	; (8002f28 <_vfiprintf_r+0x240>)
 8002d02:	429d      	cmp	r5, r3
 8002d04:	d11b      	bne.n	8002d3e <_vfiprintf_r+0x56>
 8002d06:	6875      	ldr	r5, [r6, #4]
 8002d08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d0a:	07d9      	lsls	r1, r3, #31
 8002d0c:	d405      	bmi.n	8002d1a <_vfiprintf_r+0x32>
 8002d0e:	89ab      	ldrh	r3, [r5, #12]
 8002d10:	059a      	lsls	r2, r3, #22
 8002d12:	d402      	bmi.n	8002d1a <_vfiprintf_r+0x32>
 8002d14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d16:	f7ff fe7b 	bl	8002a10 <__retarget_lock_acquire_recursive>
 8002d1a:	89ab      	ldrh	r3, [r5, #12]
 8002d1c:	071b      	lsls	r3, r3, #28
 8002d1e:	d501      	bpl.n	8002d24 <_vfiprintf_r+0x3c>
 8002d20:	692b      	ldr	r3, [r5, #16]
 8002d22:	b9eb      	cbnz	r3, 8002d60 <_vfiprintf_r+0x78>
 8002d24:	4629      	mov	r1, r5
 8002d26:	4630      	mov	r0, r6
 8002d28:	f7ff fc50 	bl	80025cc <__swsetup_r>
 8002d2c:	b1c0      	cbz	r0, 8002d60 <_vfiprintf_r+0x78>
 8002d2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d30:	07dc      	lsls	r4, r3, #31
 8002d32:	d50e      	bpl.n	8002d52 <_vfiprintf_r+0x6a>
 8002d34:	f04f 30ff 	mov.w	r0, #4294967295
 8002d38:	b01d      	add	sp, #116	; 0x74
 8002d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d3e:	4b7b      	ldr	r3, [pc, #492]	; (8002f2c <_vfiprintf_r+0x244>)
 8002d40:	429d      	cmp	r5, r3
 8002d42:	d101      	bne.n	8002d48 <_vfiprintf_r+0x60>
 8002d44:	68b5      	ldr	r5, [r6, #8]
 8002d46:	e7df      	b.n	8002d08 <_vfiprintf_r+0x20>
 8002d48:	4b79      	ldr	r3, [pc, #484]	; (8002f30 <_vfiprintf_r+0x248>)
 8002d4a:	429d      	cmp	r5, r3
 8002d4c:	bf08      	it	eq
 8002d4e:	68f5      	ldreq	r5, [r6, #12]
 8002d50:	e7da      	b.n	8002d08 <_vfiprintf_r+0x20>
 8002d52:	89ab      	ldrh	r3, [r5, #12]
 8002d54:	0598      	lsls	r0, r3, #22
 8002d56:	d4ed      	bmi.n	8002d34 <_vfiprintf_r+0x4c>
 8002d58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d5a:	f7ff fe5a 	bl	8002a12 <__retarget_lock_release_recursive>
 8002d5e:	e7e9      	b.n	8002d34 <_vfiprintf_r+0x4c>
 8002d60:	2300      	movs	r3, #0
 8002d62:	9309      	str	r3, [sp, #36]	; 0x24
 8002d64:	2320      	movs	r3, #32
 8002d66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d6a:	2330      	movs	r3, #48	; 0x30
 8002d6c:	f04f 0901 	mov.w	r9, #1
 8002d70:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d74:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002f34 <_vfiprintf_r+0x24c>
 8002d78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d7c:	4623      	mov	r3, r4
 8002d7e:	469a      	mov	sl, r3
 8002d80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d84:	b10a      	cbz	r2, 8002d8a <_vfiprintf_r+0xa2>
 8002d86:	2a25      	cmp	r2, #37	; 0x25
 8002d88:	d1f9      	bne.n	8002d7e <_vfiprintf_r+0x96>
 8002d8a:	ebba 0b04 	subs.w	fp, sl, r4
 8002d8e:	d00b      	beq.n	8002da8 <_vfiprintf_r+0xc0>
 8002d90:	465b      	mov	r3, fp
 8002d92:	4622      	mov	r2, r4
 8002d94:	4629      	mov	r1, r5
 8002d96:	4630      	mov	r0, r6
 8002d98:	f7ff ff93 	bl	8002cc2 <__sfputs_r>
 8002d9c:	3001      	adds	r0, #1
 8002d9e:	f000 80aa 	beq.w	8002ef6 <_vfiprintf_r+0x20e>
 8002da2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002da4:	445a      	add	r2, fp
 8002da6:	9209      	str	r2, [sp, #36]	; 0x24
 8002da8:	f89a 3000 	ldrb.w	r3, [sl]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 80a2 	beq.w	8002ef6 <_vfiprintf_r+0x20e>
 8002db2:	2300      	movs	r3, #0
 8002db4:	f04f 32ff 	mov.w	r2, #4294967295
 8002db8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002dbc:	f10a 0a01 	add.w	sl, sl, #1
 8002dc0:	9304      	str	r3, [sp, #16]
 8002dc2:	9307      	str	r3, [sp, #28]
 8002dc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002dc8:	931a      	str	r3, [sp, #104]	; 0x68
 8002dca:	4654      	mov	r4, sl
 8002dcc:	2205      	movs	r2, #5
 8002dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dd2:	4858      	ldr	r0, [pc, #352]	; (8002f34 <_vfiprintf_r+0x24c>)
 8002dd4:	f000 faf8 	bl	80033c8 <memchr>
 8002dd8:	9a04      	ldr	r2, [sp, #16]
 8002dda:	b9d8      	cbnz	r0, 8002e14 <_vfiprintf_r+0x12c>
 8002ddc:	06d1      	lsls	r1, r2, #27
 8002dde:	bf44      	itt	mi
 8002de0:	2320      	movmi	r3, #32
 8002de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002de6:	0713      	lsls	r3, r2, #28
 8002de8:	bf44      	itt	mi
 8002dea:	232b      	movmi	r3, #43	; 0x2b
 8002dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002df0:	f89a 3000 	ldrb.w	r3, [sl]
 8002df4:	2b2a      	cmp	r3, #42	; 0x2a
 8002df6:	d015      	beq.n	8002e24 <_vfiprintf_r+0x13c>
 8002df8:	4654      	mov	r4, sl
 8002dfa:	2000      	movs	r0, #0
 8002dfc:	f04f 0c0a 	mov.w	ip, #10
 8002e00:	9a07      	ldr	r2, [sp, #28]
 8002e02:	4621      	mov	r1, r4
 8002e04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e08:	3b30      	subs	r3, #48	; 0x30
 8002e0a:	2b09      	cmp	r3, #9
 8002e0c:	d94e      	bls.n	8002eac <_vfiprintf_r+0x1c4>
 8002e0e:	b1b0      	cbz	r0, 8002e3e <_vfiprintf_r+0x156>
 8002e10:	9207      	str	r2, [sp, #28]
 8002e12:	e014      	b.n	8002e3e <_vfiprintf_r+0x156>
 8002e14:	eba0 0308 	sub.w	r3, r0, r8
 8002e18:	fa09 f303 	lsl.w	r3, r9, r3
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	46a2      	mov	sl, r4
 8002e20:	9304      	str	r3, [sp, #16]
 8002e22:	e7d2      	b.n	8002dca <_vfiprintf_r+0xe2>
 8002e24:	9b03      	ldr	r3, [sp, #12]
 8002e26:	1d19      	adds	r1, r3, #4
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	9103      	str	r1, [sp, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	bfbb      	ittet	lt
 8002e30:	425b      	neglt	r3, r3
 8002e32:	f042 0202 	orrlt.w	r2, r2, #2
 8002e36:	9307      	strge	r3, [sp, #28]
 8002e38:	9307      	strlt	r3, [sp, #28]
 8002e3a:	bfb8      	it	lt
 8002e3c:	9204      	strlt	r2, [sp, #16]
 8002e3e:	7823      	ldrb	r3, [r4, #0]
 8002e40:	2b2e      	cmp	r3, #46	; 0x2e
 8002e42:	d10c      	bne.n	8002e5e <_vfiprintf_r+0x176>
 8002e44:	7863      	ldrb	r3, [r4, #1]
 8002e46:	2b2a      	cmp	r3, #42	; 0x2a
 8002e48:	d135      	bne.n	8002eb6 <_vfiprintf_r+0x1ce>
 8002e4a:	9b03      	ldr	r3, [sp, #12]
 8002e4c:	3402      	adds	r4, #2
 8002e4e:	1d1a      	adds	r2, r3, #4
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	9203      	str	r2, [sp, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	bfb8      	it	lt
 8002e58:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e5c:	9305      	str	r3, [sp, #20]
 8002e5e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002f38 <_vfiprintf_r+0x250>
 8002e62:	2203      	movs	r2, #3
 8002e64:	4650      	mov	r0, sl
 8002e66:	7821      	ldrb	r1, [r4, #0]
 8002e68:	f000 faae 	bl	80033c8 <memchr>
 8002e6c:	b140      	cbz	r0, 8002e80 <_vfiprintf_r+0x198>
 8002e6e:	2340      	movs	r3, #64	; 0x40
 8002e70:	eba0 000a 	sub.w	r0, r0, sl
 8002e74:	fa03 f000 	lsl.w	r0, r3, r0
 8002e78:	9b04      	ldr	r3, [sp, #16]
 8002e7a:	3401      	adds	r4, #1
 8002e7c:	4303      	orrs	r3, r0
 8002e7e:	9304      	str	r3, [sp, #16]
 8002e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e84:	2206      	movs	r2, #6
 8002e86:	482d      	ldr	r0, [pc, #180]	; (8002f3c <_vfiprintf_r+0x254>)
 8002e88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e8c:	f000 fa9c 	bl	80033c8 <memchr>
 8002e90:	2800      	cmp	r0, #0
 8002e92:	d03f      	beq.n	8002f14 <_vfiprintf_r+0x22c>
 8002e94:	4b2a      	ldr	r3, [pc, #168]	; (8002f40 <_vfiprintf_r+0x258>)
 8002e96:	bb1b      	cbnz	r3, 8002ee0 <_vfiprintf_r+0x1f8>
 8002e98:	9b03      	ldr	r3, [sp, #12]
 8002e9a:	3307      	adds	r3, #7
 8002e9c:	f023 0307 	bic.w	r3, r3, #7
 8002ea0:	3308      	adds	r3, #8
 8002ea2:	9303      	str	r3, [sp, #12]
 8002ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ea6:	443b      	add	r3, r7
 8002ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8002eaa:	e767      	b.n	8002d7c <_vfiprintf_r+0x94>
 8002eac:	460c      	mov	r4, r1
 8002eae:	2001      	movs	r0, #1
 8002eb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8002eb4:	e7a5      	b.n	8002e02 <_vfiprintf_r+0x11a>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f04f 0c0a 	mov.w	ip, #10
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	3401      	adds	r4, #1
 8002ec0:	9305      	str	r3, [sp, #20]
 8002ec2:	4620      	mov	r0, r4
 8002ec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ec8:	3a30      	subs	r2, #48	; 0x30
 8002eca:	2a09      	cmp	r2, #9
 8002ecc:	d903      	bls.n	8002ed6 <_vfiprintf_r+0x1ee>
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0c5      	beq.n	8002e5e <_vfiprintf_r+0x176>
 8002ed2:	9105      	str	r1, [sp, #20]
 8002ed4:	e7c3      	b.n	8002e5e <_vfiprintf_r+0x176>
 8002ed6:	4604      	mov	r4, r0
 8002ed8:	2301      	movs	r3, #1
 8002eda:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ede:	e7f0      	b.n	8002ec2 <_vfiprintf_r+0x1da>
 8002ee0:	ab03      	add	r3, sp, #12
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	462a      	mov	r2, r5
 8002ee6:	4630      	mov	r0, r6
 8002ee8:	4b16      	ldr	r3, [pc, #88]	; (8002f44 <_vfiprintf_r+0x25c>)
 8002eea:	a904      	add	r1, sp, #16
 8002eec:	f3af 8000 	nop.w
 8002ef0:	4607      	mov	r7, r0
 8002ef2:	1c78      	adds	r0, r7, #1
 8002ef4:	d1d6      	bne.n	8002ea4 <_vfiprintf_r+0x1bc>
 8002ef6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ef8:	07d9      	lsls	r1, r3, #31
 8002efa:	d405      	bmi.n	8002f08 <_vfiprintf_r+0x220>
 8002efc:	89ab      	ldrh	r3, [r5, #12]
 8002efe:	059a      	lsls	r2, r3, #22
 8002f00:	d402      	bmi.n	8002f08 <_vfiprintf_r+0x220>
 8002f02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f04:	f7ff fd85 	bl	8002a12 <__retarget_lock_release_recursive>
 8002f08:	89ab      	ldrh	r3, [r5, #12]
 8002f0a:	065b      	lsls	r3, r3, #25
 8002f0c:	f53f af12 	bmi.w	8002d34 <_vfiprintf_r+0x4c>
 8002f10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f12:	e711      	b.n	8002d38 <_vfiprintf_r+0x50>
 8002f14:	ab03      	add	r3, sp, #12
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	462a      	mov	r2, r5
 8002f1a:	4630      	mov	r0, r6
 8002f1c:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <_vfiprintf_r+0x25c>)
 8002f1e:	a904      	add	r1, sp, #16
 8002f20:	f000 f882 	bl	8003028 <_printf_i>
 8002f24:	e7e4      	b.n	8002ef0 <_vfiprintf_r+0x208>
 8002f26:	bf00      	nop
 8002f28:	080035f4 	.word	0x080035f4
 8002f2c:	08003614 	.word	0x08003614
 8002f30:	080035d4 	.word	0x080035d4
 8002f34:	08003634 	.word	0x08003634
 8002f38:	0800363a 	.word	0x0800363a
 8002f3c:	0800363e 	.word	0x0800363e
 8002f40:	00000000 	.word	0x00000000
 8002f44:	08002cc3 	.word	0x08002cc3

08002f48 <_printf_common>:
 8002f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f4c:	4616      	mov	r6, r2
 8002f4e:	4699      	mov	r9, r3
 8002f50:	688a      	ldr	r2, [r1, #8]
 8002f52:	690b      	ldr	r3, [r1, #16]
 8002f54:	4607      	mov	r7, r0
 8002f56:	4293      	cmp	r3, r2
 8002f58:	bfb8      	it	lt
 8002f5a:	4613      	movlt	r3, r2
 8002f5c:	6033      	str	r3, [r6, #0]
 8002f5e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f62:	460c      	mov	r4, r1
 8002f64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f68:	b10a      	cbz	r2, 8002f6e <_printf_common+0x26>
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	6033      	str	r3, [r6, #0]
 8002f6e:	6823      	ldr	r3, [r4, #0]
 8002f70:	0699      	lsls	r1, r3, #26
 8002f72:	bf42      	ittt	mi
 8002f74:	6833      	ldrmi	r3, [r6, #0]
 8002f76:	3302      	addmi	r3, #2
 8002f78:	6033      	strmi	r3, [r6, #0]
 8002f7a:	6825      	ldr	r5, [r4, #0]
 8002f7c:	f015 0506 	ands.w	r5, r5, #6
 8002f80:	d106      	bne.n	8002f90 <_printf_common+0x48>
 8002f82:	f104 0a19 	add.w	sl, r4, #25
 8002f86:	68e3      	ldr	r3, [r4, #12]
 8002f88:	6832      	ldr	r2, [r6, #0]
 8002f8a:	1a9b      	subs	r3, r3, r2
 8002f8c:	42ab      	cmp	r3, r5
 8002f8e:	dc28      	bgt.n	8002fe2 <_printf_common+0x9a>
 8002f90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f94:	1e13      	subs	r3, r2, #0
 8002f96:	6822      	ldr	r2, [r4, #0]
 8002f98:	bf18      	it	ne
 8002f9a:	2301      	movne	r3, #1
 8002f9c:	0692      	lsls	r2, r2, #26
 8002f9e:	d42d      	bmi.n	8002ffc <_printf_common+0xb4>
 8002fa0:	4649      	mov	r1, r9
 8002fa2:	4638      	mov	r0, r7
 8002fa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fa8:	47c0      	blx	r8
 8002faa:	3001      	adds	r0, #1
 8002fac:	d020      	beq.n	8002ff0 <_printf_common+0xa8>
 8002fae:	6823      	ldr	r3, [r4, #0]
 8002fb0:	68e5      	ldr	r5, [r4, #12]
 8002fb2:	f003 0306 	and.w	r3, r3, #6
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	bf18      	it	ne
 8002fba:	2500      	movne	r5, #0
 8002fbc:	6832      	ldr	r2, [r6, #0]
 8002fbe:	f04f 0600 	mov.w	r6, #0
 8002fc2:	68a3      	ldr	r3, [r4, #8]
 8002fc4:	bf08      	it	eq
 8002fc6:	1aad      	subeq	r5, r5, r2
 8002fc8:	6922      	ldr	r2, [r4, #16]
 8002fca:	bf08      	it	eq
 8002fcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	bfc4      	itt	gt
 8002fd4:	1a9b      	subgt	r3, r3, r2
 8002fd6:	18ed      	addgt	r5, r5, r3
 8002fd8:	341a      	adds	r4, #26
 8002fda:	42b5      	cmp	r5, r6
 8002fdc:	d11a      	bne.n	8003014 <_printf_common+0xcc>
 8002fde:	2000      	movs	r0, #0
 8002fe0:	e008      	b.n	8002ff4 <_printf_common+0xac>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	4652      	mov	r2, sl
 8002fe6:	4649      	mov	r1, r9
 8002fe8:	4638      	mov	r0, r7
 8002fea:	47c0      	blx	r8
 8002fec:	3001      	adds	r0, #1
 8002fee:	d103      	bne.n	8002ff8 <_printf_common+0xb0>
 8002ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ff8:	3501      	adds	r5, #1
 8002ffa:	e7c4      	b.n	8002f86 <_printf_common+0x3e>
 8002ffc:	2030      	movs	r0, #48	; 0x30
 8002ffe:	18e1      	adds	r1, r4, r3
 8003000:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800300a:	4422      	add	r2, r4
 800300c:	3302      	adds	r3, #2
 800300e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003012:	e7c5      	b.n	8002fa0 <_printf_common+0x58>
 8003014:	2301      	movs	r3, #1
 8003016:	4622      	mov	r2, r4
 8003018:	4649      	mov	r1, r9
 800301a:	4638      	mov	r0, r7
 800301c:	47c0      	blx	r8
 800301e:	3001      	adds	r0, #1
 8003020:	d0e6      	beq.n	8002ff0 <_printf_common+0xa8>
 8003022:	3601      	adds	r6, #1
 8003024:	e7d9      	b.n	8002fda <_printf_common+0x92>
	...

08003028 <_printf_i>:
 8003028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800302c:	7e0f      	ldrb	r7, [r1, #24]
 800302e:	4691      	mov	r9, r2
 8003030:	2f78      	cmp	r7, #120	; 0x78
 8003032:	4680      	mov	r8, r0
 8003034:	460c      	mov	r4, r1
 8003036:	469a      	mov	sl, r3
 8003038:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800303a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800303e:	d807      	bhi.n	8003050 <_printf_i+0x28>
 8003040:	2f62      	cmp	r7, #98	; 0x62
 8003042:	d80a      	bhi.n	800305a <_printf_i+0x32>
 8003044:	2f00      	cmp	r7, #0
 8003046:	f000 80d9 	beq.w	80031fc <_printf_i+0x1d4>
 800304a:	2f58      	cmp	r7, #88	; 0x58
 800304c:	f000 80a4 	beq.w	8003198 <_printf_i+0x170>
 8003050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003054:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003058:	e03a      	b.n	80030d0 <_printf_i+0xa8>
 800305a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800305e:	2b15      	cmp	r3, #21
 8003060:	d8f6      	bhi.n	8003050 <_printf_i+0x28>
 8003062:	a101      	add	r1, pc, #4	; (adr r1, 8003068 <_printf_i+0x40>)
 8003064:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003068:	080030c1 	.word	0x080030c1
 800306c:	080030d5 	.word	0x080030d5
 8003070:	08003051 	.word	0x08003051
 8003074:	08003051 	.word	0x08003051
 8003078:	08003051 	.word	0x08003051
 800307c:	08003051 	.word	0x08003051
 8003080:	080030d5 	.word	0x080030d5
 8003084:	08003051 	.word	0x08003051
 8003088:	08003051 	.word	0x08003051
 800308c:	08003051 	.word	0x08003051
 8003090:	08003051 	.word	0x08003051
 8003094:	080031e3 	.word	0x080031e3
 8003098:	08003105 	.word	0x08003105
 800309c:	080031c5 	.word	0x080031c5
 80030a0:	08003051 	.word	0x08003051
 80030a4:	08003051 	.word	0x08003051
 80030a8:	08003205 	.word	0x08003205
 80030ac:	08003051 	.word	0x08003051
 80030b0:	08003105 	.word	0x08003105
 80030b4:	08003051 	.word	0x08003051
 80030b8:	08003051 	.word	0x08003051
 80030bc:	080031cd 	.word	0x080031cd
 80030c0:	682b      	ldr	r3, [r5, #0]
 80030c2:	1d1a      	adds	r2, r3, #4
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	602a      	str	r2, [r5, #0]
 80030c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030d0:	2301      	movs	r3, #1
 80030d2:	e0a4      	b.n	800321e <_printf_i+0x1f6>
 80030d4:	6820      	ldr	r0, [r4, #0]
 80030d6:	6829      	ldr	r1, [r5, #0]
 80030d8:	0606      	lsls	r6, r0, #24
 80030da:	f101 0304 	add.w	r3, r1, #4
 80030de:	d50a      	bpl.n	80030f6 <_printf_i+0xce>
 80030e0:	680e      	ldr	r6, [r1, #0]
 80030e2:	602b      	str	r3, [r5, #0]
 80030e4:	2e00      	cmp	r6, #0
 80030e6:	da03      	bge.n	80030f0 <_printf_i+0xc8>
 80030e8:	232d      	movs	r3, #45	; 0x2d
 80030ea:	4276      	negs	r6, r6
 80030ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030f0:	230a      	movs	r3, #10
 80030f2:	485e      	ldr	r0, [pc, #376]	; (800326c <_printf_i+0x244>)
 80030f4:	e019      	b.n	800312a <_printf_i+0x102>
 80030f6:	680e      	ldr	r6, [r1, #0]
 80030f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80030fc:	602b      	str	r3, [r5, #0]
 80030fe:	bf18      	it	ne
 8003100:	b236      	sxthne	r6, r6
 8003102:	e7ef      	b.n	80030e4 <_printf_i+0xbc>
 8003104:	682b      	ldr	r3, [r5, #0]
 8003106:	6820      	ldr	r0, [r4, #0]
 8003108:	1d19      	adds	r1, r3, #4
 800310a:	6029      	str	r1, [r5, #0]
 800310c:	0601      	lsls	r1, r0, #24
 800310e:	d501      	bpl.n	8003114 <_printf_i+0xec>
 8003110:	681e      	ldr	r6, [r3, #0]
 8003112:	e002      	b.n	800311a <_printf_i+0xf2>
 8003114:	0646      	lsls	r6, r0, #25
 8003116:	d5fb      	bpl.n	8003110 <_printf_i+0xe8>
 8003118:	881e      	ldrh	r6, [r3, #0]
 800311a:	2f6f      	cmp	r7, #111	; 0x6f
 800311c:	bf0c      	ite	eq
 800311e:	2308      	moveq	r3, #8
 8003120:	230a      	movne	r3, #10
 8003122:	4852      	ldr	r0, [pc, #328]	; (800326c <_printf_i+0x244>)
 8003124:	2100      	movs	r1, #0
 8003126:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800312a:	6865      	ldr	r5, [r4, #4]
 800312c:	2d00      	cmp	r5, #0
 800312e:	bfa8      	it	ge
 8003130:	6821      	ldrge	r1, [r4, #0]
 8003132:	60a5      	str	r5, [r4, #8]
 8003134:	bfa4      	itt	ge
 8003136:	f021 0104 	bicge.w	r1, r1, #4
 800313a:	6021      	strge	r1, [r4, #0]
 800313c:	b90e      	cbnz	r6, 8003142 <_printf_i+0x11a>
 800313e:	2d00      	cmp	r5, #0
 8003140:	d04d      	beq.n	80031de <_printf_i+0x1b6>
 8003142:	4615      	mov	r5, r2
 8003144:	fbb6 f1f3 	udiv	r1, r6, r3
 8003148:	fb03 6711 	mls	r7, r3, r1, r6
 800314c:	5dc7      	ldrb	r7, [r0, r7]
 800314e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003152:	4637      	mov	r7, r6
 8003154:	42bb      	cmp	r3, r7
 8003156:	460e      	mov	r6, r1
 8003158:	d9f4      	bls.n	8003144 <_printf_i+0x11c>
 800315a:	2b08      	cmp	r3, #8
 800315c:	d10b      	bne.n	8003176 <_printf_i+0x14e>
 800315e:	6823      	ldr	r3, [r4, #0]
 8003160:	07de      	lsls	r6, r3, #31
 8003162:	d508      	bpl.n	8003176 <_printf_i+0x14e>
 8003164:	6923      	ldr	r3, [r4, #16]
 8003166:	6861      	ldr	r1, [r4, #4]
 8003168:	4299      	cmp	r1, r3
 800316a:	bfde      	ittt	le
 800316c:	2330      	movle	r3, #48	; 0x30
 800316e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003172:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003176:	1b52      	subs	r2, r2, r5
 8003178:	6122      	str	r2, [r4, #16]
 800317a:	464b      	mov	r3, r9
 800317c:	4621      	mov	r1, r4
 800317e:	4640      	mov	r0, r8
 8003180:	f8cd a000 	str.w	sl, [sp]
 8003184:	aa03      	add	r2, sp, #12
 8003186:	f7ff fedf 	bl	8002f48 <_printf_common>
 800318a:	3001      	adds	r0, #1
 800318c:	d14c      	bne.n	8003228 <_printf_i+0x200>
 800318e:	f04f 30ff 	mov.w	r0, #4294967295
 8003192:	b004      	add	sp, #16
 8003194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003198:	4834      	ldr	r0, [pc, #208]	; (800326c <_printf_i+0x244>)
 800319a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800319e:	6829      	ldr	r1, [r5, #0]
 80031a0:	6823      	ldr	r3, [r4, #0]
 80031a2:	f851 6b04 	ldr.w	r6, [r1], #4
 80031a6:	6029      	str	r1, [r5, #0]
 80031a8:	061d      	lsls	r5, r3, #24
 80031aa:	d514      	bpl.n	80031d6 <_printf_i+0x1ae>
 80031ac:	07df      	lsls	r7, r3, #31
 80031ae:	bf44      	itt	mi
 80031b0:	f043 0320 	orrmi.w	r3, r3, #32
 80031b4:	6023      	strmi	r3, [r4, #0]
 80031b6:	b91e      	cbnz	r6, 80031c0 <_printf_i+0x198>
 80031b8:	6823      	ldr	r3, [r4, #0]
 80031ba:	f023 0320 	bic.w	r3, r3, #32
 80031be:	6023      	str	r3, [r4, #0]
 80031c0:	2310      	movs	r3, #16
 80031c2:	e7af      	b.n	8003124 <_printf_i+0xfc>
 80031c4:	6823      	ldr	r3, [r4, #0]
 80031c6:	f043 0320 	orr.w	r3, r3, #32
 80031ca:	6023      	str	r3, [r4, #0]
 80031cc:	2378      	movs	r3, #120	; 0x78
 80031ce:	4828      	ldr	r0, [pc, #160]	; (8003270 <_printf_i+0x248>)
 80031d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80031d4:	e7e3      	b.n	800319e <_printf_i+0x176>
 80031d6:	0659      	lsls	r1, r3, #25
 80031d8:	bf48      	it	mi
 80031da:	b2b6      	uxthmi	r6, r6
 80031dc:	e7e6      	b.n	80031ac <_printf_i+0x184>
 80031de:	4615      	mov	r5, r2
 80031e0:	e7bb      	b.n	800315a <_printf_i+0x132>
 80031e2:	682b      	ldr	r3, [r5, #0]
 80031e4:	6826      	ldr	r6, [r4, #0]
 80031e6:	1d18      	adds	r0, r3, #4
 80031e8:	6961      	ldr	r1, [r4, #20]
 80031ea:	6028      	str	r0, [r5, #0]
 80031ec:	0635      	lsls	r5, r6, #24
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	d501      	bpl.n	80031f6 <_printf_i+0x1ce>
 80031f2:	6019      	str	r1, [r3, #0]
 80031f4:	e002      	b.n	80031fc <_printf_i+0x1d4>
 80031f6:	0670      	lsls	r0, r6, #25
 80031f8:	d5fb      	bpl.n	80031f2 <_printf_i+0x1ca>
 80031fa:	8019      	strh	r1, [r3, #0]
 80031fc:	2300      	movs	r3, #0
 80031fe:	4615      	mov	r5, r2
 8003200:	6123      	str	r3, [r4, #16]
 8003202:	e7ba      	b.n	800317a <_printf_i+0x152>
 8003204:	682b      	ldr	r3, [r5, #0]
 8003206:	2100      	movs	r1, #0
 8003208:	1d1a      	adds	r2, r3, #4
 800320a:	602a      	str	r2, [r5, #0]
 800320c:	681d      	ldr	r5, [r3, #0]
 800320e:	6862      	ldr	r2, [r4, #4]
 8003210:	4628      	mov	r0, r5
 8003212:	f000 f8d9 	bl	80033c8 <memchr>
 8003216:	b108      	cbz	r0, 800321c <_printf_i+0x1f4>
 8003218:	1b40      	subs	r0, r0, r5
 800321a:	6060      	str	r0, [r4, #4]
 800321c:	6863      	ldr	r3, [r4, #4]
 800321e:	6123      	str	r3, [r4, #16]
 8003220:	2300      	movs	r3, #0
 8003222:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003226:	e7a8      	b.n	800317a <_printf_i+0x152>
 8003228:	462a      	mov	r2, r5
 800322a:	4649      	mov	r1, r9
 800322c:	4640      	mov	r0, r8
 800322e:	6923      	ldr	r3, [r4, #16]
 8003230:	47d0      	blx	sl
 8003232:	3001      	adds	r0, #1
 8003234:	d0ab      	beq.n	800318e <_printf_i+0x166>
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	079b      	lsls	r3, r3, #30
 800323a:	d413      	bmi.n	8003264 <_printf_i+0x23c>
 800323c:	68e0      	ldr	r0, [r4, #12]
 800323e:	9b03      	ldr	r3, [sp, #12]
 8003240:	4298      	cmp	r0, r3
 8003242:	bfb8      	it	lt
 8003244:	4618      	movlt	r0, r3
 8003246:	e7a4      	b.n	8003192 <_printf_i+0x16a>
 8003248:	2301      	movs	r3, #1
 800324a:	4632      	mov	r2, r6
 800324c:	4649      	mov	r1, r9
 800324e:	4640      	mov	r0, r8
 8003250:	47d0      	blx	sl
 8003252:	3001      	adds	r0, #1
 8003254:	d09b      	beq.n	800318e <_printf_i+0x166>
 8003256:	3501      	adds	r5, #1
 8003258:	68e3      	ldr	r3, [r4, #12]
 800325a:	9903      	ldr	r1, [sp, #12]
 800325c:	1a5b      	subs	r3, r3, r1
 800325e:	42ab      	cmp	r3, r5
 8003260:	dcf2      	bgt.n	8003248 <_printf_i+0x220>
 8003262:	e7eb      	b.n	800323c <_printf_i+0x214>
 8003264:	2500      	movs	r5, #0
 8003266:	f104 0619 	add.w	r6, r4, #25
 800326a:	e7f5      	b.n	8003258 <_printf_i+0x230>
 800326c:	08003645 	.word	0x08003645
 8003270:	08003656 	.word	0x08003656

08003274 <_sbrk_r>:
 8003274:	b538      	push	{r3, r4, r5, lr}
 8003276:	2300      	movs	r3, #0
 8003278:	4d05      	ldr	r5, [pc, #20]	; (8003290 <_sbrk_r+0x1c>)
 800327a:	4604      	mov	r4, r0
 800327c:	4608      	mov	r0, r1
 800327e:	602b      	str	r3, [r5, #0]
 8003280:	f7fd fbee 	bl	8000a60 <_sbrk>
 8003284:	1c43      	adds	r3, r0, #1
 8003286:	d102      	bne.n	800328e <_sbrk_r+0x1a>
 8003288:	682b      	ldr	r3, [r5, #0]
 800328a:	b103      	cbz	r3, 800328e <_sbrk_r+0x1a>
 800328c:	6023      	str	r3, [r4, #0]
 800328e:	bd38      	pop	{r3, r4, r5, pc}
 8003290:	20000458 	.word	0x20000458

08003294 <__sread>:
 8003294:	b510      	push	{r4, lr}
 8003296:	460c      	mov	r4, r1
 8003298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800329c:	f000 f8ae 	bl	80033fc <_read_r>
 80032a0:	2800      	cmp	r0, #0
 80032a2:	bfab      	itete	ge
 80032a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80032a6:	89a3      	ldrhlt	r3, [r4, #12]
 80032a8:	181b      	addge	r3, r3, r0
 80032aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80032ae:	bfac      	ite	ge
 80032b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80032b2:	81a3      	strhlt	r3, [r4, #12]
 80032b4:	bd10      	pop	{r4, pc}

080032b6 <__swrite>:
 80032b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032ba:	461f      	mov	r7, r3
 80032bc:	898b      	ldrh	r3, [r1, #12]
 80032be:	4605      	mov	r5, r0
 80032c0:	05db      	lsls	r3, r3, #23
 80032c2:	460c      	mov	r4, r1
 80032c4:	4616      	mov	r6, r2
 80032c6:	d505      	bpl.n	80032d4 <__swrite+0x1e>
 80032c8:	2302      	movs	r3, #2
 80032ca:	2200      	movs	r2, #0
 80032cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032d0:	f000 f868 	bl	80033a4 <_lseek_r>
 80032d4:	89a3      	ldrh	r3, [r4, #12]
 80032d6:	4632      	mov	r2, r6
 80032d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032dc:	81a3      	strh	r3, [r4, #12]
 80032de:	4628      	mov	r0, r5
 80032e0:	463b      	mov	r3, r7
 80032e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032ea:	f000 b817 	b.w	800331c <_write_r>

080032ee <__sseek>:
 80032ee:	b510      	push	{r4, lr}
 80032f0:	460c      	mov	r4, r1
 80032f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032f6:	f000 f855 	bl	80033a4 <_lseek_r>
 80032fa:	1c43      	adds	r3, r0, #1
 80032fc:	89a3      	ldrh	r3, [r4, #12]
 80032fe:	bf15      	itete	ne
 8003300:	6560      	strne	r0, [r4, #84]	; 0x54
 8003302:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003306:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800330a:	81a3      	strheq	r3, [r4, #12]
 800330c:	bf18      	it	ne
 800330e:	81a3      	strhne	r3, [r4, #12]
 8003310:	bd10      	pop	{r4, pc}

08003312 <__sclose>:
 8003312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003316:	f000 b813 	b.w	8003340 <_close_r>
	...

0800331c <_write_r>:
 800331c:	b538      	push	{r3, r4, r5, lr}
 800331e:	4604      	mov	r4, r0
 8003320:	4608      	mov	r0, r1
 8003322:	4611      	mov	r1, r2
 8003324:	2200      	movs	r2, #0
 8003326:	4d05      	ldr	r5, [pc, #20]	; (800333c <_write_r+0x20>)
 8003328:	602a      	str	r2, [r5, #0]
 800332a:	461a      	mov	r2, r3
 800332c:	f7fd fb4c 	bl	80009c8 <_write>
 8003330:	1c43      	adds	r3, r0, #1
 8003332:	d102      	bne.n	800333a <_write_r+0x1e>
 8003334:	682b      	ldr	r3, [r5, #0]
 8003336:	b103      	cbz	r3, 800333a <_write_r+0x1e>
 8003338:	6023      	str	r3, [r4, #0]
 800333a:	bd38      	pop	{r3, r4, r5, pc}
 800333c:	20000458 	.word	0x20000458

08003340 <_close_r>:
 8003340:	b538      	push	{r3, r4, r5, lr}
 8003342:	2300      	movs	r3, #0
 8003344:	4d05      	ldr	r5, [pc, #20]	; (800335c <_close_r+0x1c>)
 8003346:	4604      	mov	r4, r0
 8003348:	4608      	mov	r0, r1
 800334a:	602b      	str	r3, [r5, #0]
 800334c:	f7fd fb58 	bl	8000a00 <_close>
 8003350:	1c43      	adds	r3, r0, #1
 8003352:	d102      	bne.n	800335a <_close_r+0x1a>
 8003354:	682b      	ldr	r3, [r5, #0]
 8003356:	b103      	cbz	r3, 800335a <_close_r+0x1a>
 8003358:	6023      	str	r3, [r4, #0]
 800335a:	bd38      	pop	{r3, r4, r5, pc}
 800335c:	20000458 	.word	0x20000458

08003360 <_fstat_r>:
 8003360:	b538      	push	{r3, r4, r5, lr}
 8003362:	2300      	movs	r3, #0
 8003364:	4d06      	ldr	r5, [pc, #24]	; (8003380 <_fstat_r+0x20>)
 8003366:	4604      	mov	r4, r0
 8003368:	4608      	mov	r0, r1
 800336a:	4611      	mov	r1, r2
 800336c:	602b      	str	r3, [r5, #0]
 800336e:	f7fd fb52 	bl	8000a16 <_fstat>
 8003372:	1c43      	adds	r3, r0, #1
 8003374:	d102      	bne.n	800337c <_fstat_r+0x1c>
 8003376:	682b      	ldr	r3, [r5, #0]
 8003378:	b103      	cbz	r3, 800337c <_fstat_r+0x1c>
 800337a:	6023      	str	r3, [r4, #0]
 800337c:	bd38      	pop	{r3, r4, r5, pc}
 800337e:	bf00      	nop
 8003380:	20000458 	.word	0x20000458

08003384 <_isatty_r>:
 8003384:	b538      	push	{r3, r4, r5, lr}
 8003386:	2300      	movs	r3, #0
 8003388:	4d05      	ldr	r5, [pc, #20]	; (80033a0 <_isatty_r+0x1c>)
 800338a:	4604      	mov	r4, r0
 800338c:	4608      	mov	r0, r1
 800338e:	602b      	str	r3, [r5, #0]
 8003390:	f7fd fb50 	bl	8000a34 <_isatty>
 8003394:	1c43      	adds	r3, r0, #1
 8003396:	d102      	bne.n	800339e <_isatty_r+0x1a>
 8003398:	682b      	ldr	r3, [r5, #0]
 800339a:	b103      	cbz	r3, 800339e <_isatty_r+0x1a>
 800339c:	6023      	str	r3, [r4, #0]
 800339e:	bd38      	pop	{r3, r4, r5, pc}
 80033a0:	20000458 	.word	0x20000458

080033a4 <_lseek_r>:
 80033a4:	b538      	push	{r3, r4, r5, lr}
 80033a6:	4604      	mov	r4, r0
 80033a8:	4608      	mov	r0, r1
 80033aa:	4611      	mov	r1, r2
 80033ac:	2200      	movs	r2, #0
 80033ae:	4d05      	ldr	r5, [pc, #20]	; (80033c4 <_lseek_r+0x20>)
 80033b0:	602a      	str	r2, [r5, #0]
 80033b2:	461a      	mov	r2, r3
 80033b4:	f7fd fb48 	bl	8000a48 <_lseek>
 80033b8:	1c43      	adds	r3, r0, #1
 80033ba:	d102      	bne.n	80033c2 <_lseek_r+0x1e>
 80033bc:	682b      	ldr	r3, [r5, #0]
 80033be:	b103      	cbz	r3, 80033c2 <_lseek_r+0x1e>
 80033c0:	6023      	str	r3, [r4, #0]
 80033c2:	bd38      	pop	{r3, r4, r5, pc}
 80033c4:	20000458 	.word	0x20000458

080033c8 <memchr>:
 80033c8:	4603      	mov	r3, r0
 80033ca:	b510      	push	{r4, lr}
 80033cc:	b2c9      	uxtb	r1, r1
 80033ce:	4402      	add	r2, r0
 80033d0:	4293      	cmp	r3, r2
 80033d2:	4618      	mov	r0, r3
 80033d4:	d101      	bne.n	80033da <memchr+0x12>
 80033d6:	2000      	movs	r0, #0
 80033d8:	e003      	b.n	80033e2 <memchr+0x1a>
 80033da:	7804      	ldrb	r4, [r0, #0]
 80033dc:	3301      	adds	r3, #1
 80033de:	428c      	cmp	r4, r1
 80033e0:	d1f6      	bne.n	80033d0 <memchr+0x8>
 80033e2:	bd10      	pop	{r4, pc}

080033e4 <__malloc_lock>:
 80033e4:	4801      	ldr	r0, [pc, #4]	; (80033ec <__malloc_lock+0x8>)
 80033e6:	f7ff bb13 	b.w	8002a10 <__retarget_lock_acquire_recursive>
 80033ea:	bf00      	nop
 80033ec:	2000044c 	.word	0x2000044c

080033f0 <__malloc_unlock>:
 80033f0:	4801      	ldr	r0, [pc, #4]	; (80033f8 <__malloc_unlock+0x8>)
 80033f2:	f7ff bb0e 	b.w	8002a12 <__retarget_lock_release_recursive>
 80033f6:	bf00      	nop
 80033f8:	2000044c 	.word	0x2000044c

080033fc <_read_r>:
 80033fc:	b538      	push	{r3, r4, r5, lr}
 80033fe:	4604      	mov	r4, r0
 8003400:	4608      	mov	r0, r1
 8003402:	4611      	mov	r1, r2
 8003404:	2200      	movs	r2, #0
 8003406:	4d05      	ldr	r5, [pc, #20]	; (800341c <_read_r+0x20>)
 8003408:	602a      	str	r2, [r5, #0]
 800340a:	461a      	mov	r2, r3
 800340c:	f7fd fabf 	bl	800098e <_read>
 8003410:	1c43      	adds	r3, r0, #1
 8003412:	d102      	bne.n	800341a <_read_r+0x1e>
 8003414:	682b      	ldr	r3, [r5, #0]
 8003416:	b103      	cbz	r3, 800341a <_read_r+0x1e>
 8003418:	6023      	str	r3, [r4, #0]
 800341a:	bd38      	pop	{r3, r4, r5, pc}
 800341c:	20000458 	.word	0x20000458

08003420 <_init>:
 8003420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003422:	bf00      	nop
 8003424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003426:	bc08      	pop	{r3}
 8003428:	469e      	mov	lr, r3
 800342a:	4770      	bx	lr

0800342c <_fini>:
 800342c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800342e:	bf00      	nop
 8003430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003432:	bc08      	pop	{r3}
 8003434:	469e      	mov	lr, r3
 8003436:	4770      	bx	lr
